<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Github 访问问题、clone</title>
    <url>/2019/11/18/20191118_Github%20%E8%AE%BF%E9%97%AE%E9%97%AE%E9%A2%98%E3%80%81clone/</url>
    <content><![CDATA[<h4 id="非代理"><a href="#非代理" class="headerlink" title="非代理"></a>非代理</h4><ol>
<li><p>获取Github官方CDN地址：</p>
<p>   打开站长之家查询DNS，<a href="http://tool.chinaz.com/dns">http://tool.chinaz.com/dns</a> ，找到响应最快的ip<br>   或<br>   打开 <a href="https://www.ipaddress.com/">https://www.ipaddress.com/</a> 查询 DNS：</p>
<pre><code>     github.com
     assets-cdn.github.com
     github.global.ssl.fastly.net
</code></pre>
</li>
<li><p>修改hosts文件： <code>C:\Windows\System32\drivers\etc\hosts</code></p>
</li>
</ol>
<blockquote>
<p><strong>最后以管理员身份运行命令行，刷新系统DNS缓存 <code>ipconfig /flushdns</code>，即生效</strong></p>
</blockquote>
<h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4><ul>
<li><p>加快git clone速度，在git bash中：</p>
<pre><code>// 10811 改为自己的 HTTP 监听端口（在ss&quot;编辑服务器&quot;中查看）
git config --global http.https://github.com.proxy https://127.0.0.1:10811
git config --global https.https://github.com.proxy https://127.0.0.1:10811

// 同时设置sock5
git config --global http.https://github.com.proxy socks5://127.0.0.1:10811
git config --global https.https://github.com.proxy socks5://127.0.0.1:10811
</code></pre>
</li>
<li><p>查看代理</p>
<pre><code>git config --global --get http.proxy
git config --global --get https.proxy
</code></pre>
</li>
<li><p>取消代理</p>
<pre><code>git config --global --unset http.proxy
git config --global --unset https.proxy
</code></pre>
</li>
</ul>
<img src="/images/20191118_Github 访问问题、clone.png" class="nofancybox"/>

]]></content>
  </entry>
  <entry>
    <title>【转载】Rxjava学习</title>
    <url>/2019/12/10/20191210_%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91Rxjava%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>Rxjava的特点：链式编程 + 观察者模式 + 异步调度</p>
<ol>
<li>什么是观察者模式？</li>
<li>如何使用Rxjava？</li>
<li>如何异步调度？</li>
<li>场景实例</li>
</ol>
<p>代码示例：<br><a href="https://github.com/kaka10xiaobang/RxJavaDemo">https://github.com/kaka10xiaobang/RxJavaDemo</a></p>
<img src="/images/20191210_Rxjava学习.png" class="nofancybox"/>

<blockquote>
<p>转载于：<br><a href="https://www.jianshu.com/p/cd3557b1a474">https://www.jianshu.com/p/cd3557b1a474</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>发布Poetry桌面古诗词v1.0版本</title>
    <url>/2019/11/27/20191127_%E5%8F%91%E5%B8%83Poetry%E6%A1%8C%E9%9D%A2%E8%AF%97%E8%AF%8Dv1.0%E7%89%88%E6%9C%AC/</url>
    <content><![CDATA[<p>源码地址：<br><a href="https://github.com/chenyinchao/Poetry">https://github.com/chenyinchao/Poetry</a><br>下载地址：<br><a href="https://github.com/chenyinchao/Poetry/releases">https://github.com/chenyinchao/Poetry/releases</a></p>
<p>说明：每10分钟更新一条古诗词</p>
<blockquote>
<p>古诗词·一言API: <a href="https://gushi.ci/">https://gushi.ci/</a></p>
</blockquote>
<img src="/images/20191127_发布Poetry桌面古诗词v1.0版本.jpg" class="nofancybox"/>
]]></content>
  </entry>
  <entry>
    <title>常用Git命令</title>
    <url>/2019/11/28/20191128_%E5%B8%B8%E7%94%A8Git%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<ol>
<li><p>对比两次修改<br><code>git diff &lt;commit-1&gt; &lt;commit-2&gt;</code></p>
</li>
<li><p>列出两次修改间的文件<br><code>git diff --name-only &lt;commit-1&gt; &lt;commit-2&gt;</code></p>
</li>
<li><p>git rebase 捋顺提交<br> <code>git rebase -i commitId</code>，表示对此commitId以上commit进行操作<br> 其中<code>p</code>为合并到此commit上，<code>s</code>为要合并的commit<br> 那么，已经push的怎么rebase？只好push的时候加上–force覆盖origin branch上的提交（不推荐，丢失记录，并无法回退）</p>
</li>
<li><p>git commit –amend<br>当多次git commit后再一次性git push会在log里有很多fix bug的提交记录，这时如果用 <code>git commit --amend --no-edit</code>(会保留上次的提交信息)</p>
</li>
<li><p><code>git reflog</code>, 查看每一次操作的历史命令和简明历史log，便于通过指针切换版本<br><code>git log --oneline</code>, 查看简明历史log（是对 <code>git log --pretty=oneline</code>命令的简化）</p>
</li>
<li><p>版本前进、后退(本质：通过指针进行版本切换), <code>git reset --hard HEAD/commit_id</code></p>
<pre><code> HEAD 是当前版本（可以理解成一个游标）
 HEAD^是上一个版本
 HEAD^^是上上个版本
 HEAD~100是回退100个后的版本
</code></pre>
</li>
<li><p>git reset 三个参数对比</p>
<pre><code> --soft 参数：
 仅仅在本地库移动指针 HEAD

 --mixed 参数：
 在本地库移动 HEAD 指针
 重置暂存区
 
 --hard 参数：
 在本地库移动 HEAD 指针
 重置暂存区
 重置工作区
</code></pre>
</li>
<li><p>撤销操作</p>
<pre><code> git reset HEAD filename 撤回放到暂存区的文件
 git reset .  撤回所有文件(注意后面还有个.)
 git commit --amend 撤销上一次提交，并将暂存区文件重新提交
 git checkout -- &lt;file&gt; 拉取暂存区文件，并将其替换成工作区文件
 git reset HEAD -- &lt;file&gt; 拉取最近一次提交到版本库的文件到暂存区，该操作不影响工作区 //简单的来说，就是可以帮我们从版本库中拉取文件到暂存区，当我们把工作区的某个文件弄乱了，我们就可以使用该命令把版本库中的那个文件拉到暂存区，然后在拉回工作区
</code></pre>
</li>
<li><p>查看git所有配置</p>
<pre><code> git config -l
</code></pre>
</li>
<li><p>删除untrack files</p>
<pre><code>删除当前目录下untrack文件，不包括文件夹和.gitignore中指定的文件和文件夹
git clean -f

删除当前目录下untrack文件和文件夹， 不包括.gitignore中指定的文件和文件夹
git clean -df

删除当期目录下的所有untrack的文件和文件夹
git clean -xdf

显示会被删除的文件(建议删除前先查看一下)
git clean -nf
git clean -ndf
git clean -nxfd
</code></pre>
</li>
<li><p>git查看某次提交/更新所涉及的文件</p>
<pre><code>git log --stat
</code></pre>
</li>
<li><p>gitignore不起作用（. gitignore中已经标明忽略的文件目录下的文件，git push的时候还会出现在push的目录中，原因是因为在git忽略目录中，新建的文件在git中会有缓存，如果某些文件已经被纳入了版本管理中，就算是在.gitignore中已经声明了忽略路径也是不起作用的，这时候我们就应该先把本地缓存删除，然后再进行git的push，这样就不会出现忽略的文件了）。git清除本地缓存命令如下：</p>
<pre><code>git rm -r --cached .
git add .
git commit -m &#39;update .gitignore&#39;
</code></pre>
</li>
</ol>
</br>

<img src="/images/20191128_Git提交代码.png" class="nofancybox"/>
<img src="/images/20191128_Git导图.jpg" class="nofancybox"/>

<blockquote>
<p>参考：<br><a href="https://blog.csdn.net/qq_36431213/article/details/78858848">https://blog.csdn.net/qq_36431213/article/details/78858848</a></p>
<p>相关阅读：<br><a href="https://juejin.im/post/5a6ee1dd518825735300e0c0">https://juejin.im/post/5a6ee1dd518825735300e0c0</a></p>
<p>推荐阅读：<br><a href="https://github.com/521xueweihan/git-tips">https://github.com/521xueweihan/git-tips</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>【转载】Git统计代码提交行数</title>
    <url>/2019/11/22/20191122_%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91Git%E7%BB%9F%E8%AE%A1%E4%BB%A3%E7%A0%81%E6%8F%90%E4%BA%A4%E8%A1%8C%E6%95%B0/</url>
    <content><![CDATA[<h1 id="git-commit-stats"><a href="#git-commit-stats" class="headerlink" title="git commit stats"></a>git commit stats</h1><p>Commands to get commit statistics for a Git repository from the command line -<br>using <code>git log</code>, <code>git shortlog</code> and friends.</p>
<hr>

<h3 id="List-repository-contributors-by-author-name-sorted-by-name"><a href="#List-repository-contributors-by-author-name-sorted-by-name" class="headerlink" title="List repository contributors by author name (sorted by name):"></a>List repository contributors by author name (sorted by name):</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --format=<span class="string">&#x27;%aN&#x27;</span> | sort -u </span><br></pre></td></tr></table></figure>

<p><strong>Example output:</strong></p>
<pre><code>Jane Bar
John Foo
Steve Baz
</code></pre>
<hr>

<h3 id="List-total-commits-by-author-sorted-by-commit-count"><a href="#List-total-commits-by-author-sorted-by-commit-count" class="headerlink" title="List total commits by author (sorted by commit count):"></a>List total commits by author (sorted by commit count):</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git shortlog -sn</span><br></pre></td></tr></table></figure>

<p><strong>Example output:</strong></p>
<pre><code>136 Jane Bar
 41 John Foo
 17 Steve Baz
</code></pre>
<h4 id="Ignore-merge-commits"><a href="#Ignore-merge-commits" class="headerlink" title="Ignore merge commits:"></a>Ignore merge commits:</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git shortlog -sn --no-merges</span><br></pre></td></tr></table></figure>

<p><strong>Example output:</strong></p>
<pre><code>121 Jane Bar
 36 John Foo
 14 Steve Baz
</code></pre>
<p><em>Even though the <code>--no-merges</code> option is not documented for <code>git shortlog</code>, it works exactly as defined for <code>git log</code>.</em></p>
<hr>

<h3 id="List-file-change-stats-by-author"><a href="#List-file-change-stats-by-author" class="headerlink" title="List file change stats by author:"></a>List file change stats by author:</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --author=<span class="string">&quot;Vorname Nachname&quot;</span> --pretty=tformat: --numstat | awk <span class="string">&#x27;&#123;inserted+=$1; deleted+=$2; delta+=$1-$2; ratio=deleted/inserted&#125; END &#123;printf &quot;Commit stats:\n- Lines added (total)....  %s\n- Lines deleted (total)..  %s\n- Total lines (delta)....  %s\n- Add./Del. ratio (1:n)..  1 : %s\n&quot;, inserted, deleted, delta, ratio &#125;&#x27;</span> -</span><br></pre></td></tr></table></figure>

<p><strong>Example output:</strong></p>
<pre><code>Commit stats:
- Lines added (total)....  4625
- Lines deleted (total)..  836
- Total lines (delta)....  3789
- Add./Del. ratio (1:n)..  1 : 0.180757
</code></pre>
<h4 id="Include-file-count"><a href="#Include-file-count" class="headerlink" title="Include file count:"></a>Include file count:</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --shortstat --author=<span class="string">&quot;Vorname Nachname&quot;</span> | grep -E <span class="string">&quot;fil(e|es) changed&quot;</span> | awk <span class="string">&#x27;&#123;files+=$1; inserted+=$4; deleted+=$6; delta+=$4-$6; ratio=deleted/inserted&#125; END &#123;printf &quot;Commit stats:\n- Files changed (total)..  %s\n- Lines added (total)....  %s\n- Lines deleted (total)..  %s\n- Total lines (delta)....  %s\n- Add./Del. ratio (1:n)..  1 : %s\n&quot;, files, inserted, deleted, delta, ratio &#125;&#x27;</span> -</span><br></pre></td></tr></table></figure>

<p><strong>Example output:</strong></p>
<pre><code>Commit stats:
- Files changed (total)..  439
- Lines added (total)....  4625
- Lines deleted (total)..  836
- Total lines (delta)....  3789
- Add./Del. ratio (1:n)..  1 : 0.180757
</code></pre>
<h4 id="Ignore-merge-commits-1"><a href="#Ignore-merge-commits-1" class="headerlink" title="Ignore merge commits:"></a>Ignore merge commits:</h4><p>Note: Both commands above also count merge commits. But to ignore them, one can simply use the <code>--no-merges</code> option again:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --author=<span class="string">&quot;Vorname Nachname&quot;</span> --pretty=tformat: --numstat --since=<span class="string">&quot;1 Jan, 2015&quot;</span> | awk ...</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ git <span class="built_in">log</span> --shortstat --author=<span class="string">&quot;Vorname Nachname&quot;</span> --since=<span class="string">&quot;1 Jan, 2015&quot;</span> | grep -E ...</span><br></pre></td></tr></table></figure>

<h4 id="Filter-stats-by-date"><a href="#Filter-stats-by-date" class="headerlink" title="Filter stats by date:"></a>Filter stats by date:</h4><p>You can filter the output of the above commands, for example, by adding <code>--until</code> or <code>--since</code> or <code>--before</code>:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --author=<span class="string">&quot;Vorname Nachname&quot;</span> --pretty=tformat: --numstat --since=<span class="string">&quot;1 Jan, 2015&quot;</span> | awk ...</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">$ git <span class="built_in">log</span> --shortstat --author=<span class="string">&quot;Vorname Nachname&quot;</span> --since=<span class="string">&quot;1 Jan, 2015&quot;</span> | grep -E ...</span><br></pre></td></tr></table></figure>

<br>
<br>

<blockquote>
<p>转载于：<br><a href="https://gist.github.com/eyecatchup/3fb7ef0c0cbdb72412fc">https://gist.github.com/eyecatchup/3fb7ef0c0cbdb72412fc</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>RxHttp、RxLife学习</title>
    <url>/2019/12/11/20191211_RxHttp%E3%80%81RxLife%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<ul>
<li><p>RxHttp 让你眼前一亮的Http请求框架<br><a href="https://juejin.im/post/5ded221a518825125d14a1d4">https://juejin.im/post/5ded221a518825125d14a1d4</a></p>
</li>
<li><p>快速上手新一代Http请求神器RxHttp：<br><a href="https://juejin.im/post/5cfcbbcbe51d455a694f94df">https://juejin.im/post/5cfcbbcbe51d455a694f94df</a></p>
</li>
<li><p>RxHttp 一条链发送请求，新一代Http请求神器（一）<br><a href="https://juejin.im/post/5cbd267fe51d456e2b15f623">https://juejin.im/post/5cbd267fe51d456e2b15f623</a></p>
</li>
<li><p>RxHttp 一条链发送请求之强大的数据解析功能（二）<br><a href="https://juejin.im/post/5cc095b7f265da0379417be0">https://juejin.im/post/5cc095b7f265da0379417be0</a></p>
</li>
<li><p>RxHttp 一条链发送请求之强大的Param类（三）<br><a href="https://juejin.im/post/5cc47e575188252da72219ca">https://juejin.im/post/5cc47e575188252da72219ca</a></p>
</li>
<li><p>RxHttp 一条链发送请求之注解处理器 Generated API（四）<br><a href="https://juejin.im/post/5cc484146fb9a032332b35ae">https://juejin.im/post/5cc484146fb9a032332b35ae</a></p>
</li>
</ul>
<p>RxHttp一些常用的用法：</p>
<img src="/images/20191211_RxHttp一些常用的用法.png" class="nofancybox"/>

<blockquote>
<p>RxHttp源码：<br><a href="https://github.com/liujingxing/RxHttp">https://github.com/liujingxing/RxHttp</a><br>RxLife源码：<br><a href="https://github.com/liujingxing/RxLife">https://github.com/liujingxing/RxLife</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Activity的4种启动模式</title>
    <url>/2020/01/04/20200104_Activity%E7%9A%844%E7%A7%8D%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="默认启动模式standard："><a href="#默认启动模式standard：" class="headerlink" title="默认启动模式standard："></a>默认启动模式standard：</h4><img src="/images/20200104_默认启动模式standard.png" class="nofancybox"/>

<br/>

<h4 id="栈顶复用模式singleTop："><a href="#栈顶复用模式singleTop：" class="headerlink" title="栈顶复用模式singleTop："></a>栈顶复用模式singleTop：</h4><img src="/images/20200104_栈顶复用模式singleTop.png" class="nofancybox"/>

<br/>

<h4 id="栈内复用模式singleTask："><a href="#栈内复用模式singleTask：" class="headerlink" title="栈内复用模式singleTask："></a>栈内复用模式singleTask：</h4><img src="/images/20200104_栈内复用模式singleTask.png" class="nofancybox"/>

<br/>

<h4 id="全局唯一模式singleInstance："><a href="#全局唯一模式singleInstance：" class="headerlink" title="全局唯一模式singleInstance："></a>全局唯一模式singleInstance：</h4><img src="/images/20200104_全局唯一模式singleInstance.png" class="nofancybox"/>

<blockquote>
<p>参考：<br><a href="https://blog.csdn.net/zy_jibai/article/details/80587083">https://blog.csdn.net/zy_jibai/article/details/80587083</a><br><a href="https://www.v2ex.com/t/618686">https://www.v2ex.com/t/618686</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>ViewPager嵌套Fragment实现懒加载</title>
    <url>/2020/01/14/20200114_ViewPager%E5%B5%8C%E5%A5%97Fragment%E5%AE%9E%E7%8E%B0%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>使用QMUITabSegment实现ViewPager嵌套Fragment</p>
<h4 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h4><p>Fragment依附的Activity生命周期只走一遍，里面的fragment不走生命周期，导致两个fragment一次性都加载出来了</p>
<h4 id="实现的效果"><a href="#实现的效果" class="headerlink" title="实现的效果"></a>实现的效果</h4><p>两个Fragment独立加载数据，不是一次同时都加载</p>
<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> myIsVisibleToUser;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    View chatView = inflater.inflate(R.layout.activity_tab_detail, container, <span class="keyword">false</span>);</span><br><span class="line">    ExitApplication.getInstance().addActivity(getActivity());</span><br><span class="line">    initView(chatView);</span><br><span class="line">    <span class="keyword">return</span> chatView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  ViewPager嵌套fragment导致两个fragment生命周期只走一次，通过实现懒加载，每切换一次fragment即执行</span></span><br><span class="line"><span class="comment"> *  一次setUserVisibleHint方法，因为setUserVisibleHint执行比onAttach还要前，为避免getActivity空指针，</span></span><br><span class="line"><span class="comment"> *  同时在onActivityCreated里初始化一下</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> isVisibleToUser</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserVisibleHint</span><span class="params">(<span class="keyword">boolean</span> isVisibleToUser)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.setUserVisibleHint(isVisibleToUser);</span><br><span class="line">    Log.i(<span class="string">&quot;CHENYINCHAO&quot;</span>, <span class="string">&quot;setUserVisibleHint&quot;</span>);</span><br><span class="line">    myIsVisibleToUser = isVisibleToUser;</span><br><span class="line">    <span class="keyword">if</span> (isVisibleToUser &amp;&amp; getActivity() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        SelectNoFinishTask(<span class="string">&quot;&quot;</span>, i, rows);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">    Log.i(<span class="string">&quot;CHENYINCHAO&quot;</span>, <span class="string">&quot;onActivityCreated&quot;</span>);</span><br><span class="line">    setUserVisibleHint(myIsVisibleToUser);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参考：<br>setuservisiblehint如何避免context空指针<br><a href="https://stackoverflow.com/questions/39105725/null-context-in-setuservisiblehint">https://stackoverflow.com/questions/39105725/null-context-in-setuservisiblehint</a></p>
]]></content>
  </entry>
  <entry>
    <title>网络请求封装到单例模式</title>
    <url>/2020/01/15/20200115_%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E5%B0%81%E8%A3%85%E5%88%B0%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>避免多次请求网络，把请求数据存起来</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> PickAllocDetailBean instance;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">PickAllocDetailBean</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> PickAllocDetailBean <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> PickAllocDetailBean();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setInstance</span><span class="params">(PickAllocDetailBean pickAllocDetailBean)</span> </span>&#123;</span><br><span class="line">    instance = pickAllocDetailBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>计算高度</title>
    <url>/2020/01/10/20200120_%E8%AE%A1%E7%AE%97%E9%AB%98%E5%BA%A6/</url>
    <content><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>ScrollView嵌套ViewPager不显示</p>
<h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><p>Scrollview里面嵌套ViewPager，ViewPager里面放着fragment，fragment里面放着recycleview，同时要求只能通过点击fragmentTab切换页面，不能滑动</p>
<h4 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h4><p>支持Scrollview滑动，并且禁止viewpager左右滑动</p>
<h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>计算viewpager高度，同时处理viewpager滑动事件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 陈尹超</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 禁止滑动的viewpager，配合fragment使用，同时计算viewpager高度，配合scrollview使用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/1/9 13:16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoScrollViewPager</span> <span class="keyword">extends</span> <span class="title">ViewPager</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 是否禁止 viewpager 左右滑动</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> noScroll = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NoScrollViewPager</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent arg0)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (noScroll) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(arg0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent arg0)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (noScroll) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(arg0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> height = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; getChildCount(); i++) &#123;</span><br><span class="line">            View child = getChildAt(i);</span><br><span class="line">            child.measure(widthMeasureSpec, MeasureSpec.makeMeasureSpec(<span class="number">0</span>, MeasureSpec.UNSPECIFIED));</span><br><span class="line">            <span class="keyword">int</span> h = child.getMeasuredHeight();</span><br><span class="line">            <span class="keyword">if</span> (h &gt; height)</span><br><span class="line">                height = h;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        heightMeasureSpec = MeasureSpec.makeMeasureSpec(height, MeasureSpec.EXACTLY);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考<br><a href="https://www.jianshu.com/p/ba754761b43a">https://www.jianshu.com/p/ba754761b43a</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>scrcpy-无线投屏</title>
    <url>/2020/02/24/20200224_scrcpy-%E5%A4%9A%E5%B1%8F%E5%8D%8F%E5%90%8C/</url>
    <content><![CDATA[<p>项目地址：<br><a href="https://github.com/Genymobile/scrcpy">https://github.com/Genymobile/scrcpy</a></p>
<p>使用：</p>
<ol>
<li>adb环境</li>
<li>电脑连接手机，打开USB调试，或adb connect连接后即可wifi连接</li>
<li>命令行运行<code>scrcpy</code></li>
</ol>
<p>缺点：<br>音频转不到电脑</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Usage: scrcpy [options]</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"></span><br><span class="line">    -b, --bit-rate value  视频显示码率</span><br><span class="line">        Encode the video at the given bit-rate, expressed in bits/s.</span><br><span class="line">        Unit suffixes are supported: &#x27;K&#x27; (x1000) and &#x27;M&#x27; (x1000000). 支持单位后缀 K 和 M</span><br><span class="line">        Default is 8000000. 默认是8M</span><br><span class="line">假设要设置为2M 2K</span><br><span class="line">scrcpy -b 2m  </span><br><span class="line">scrcpy -b 2K</span><br><span class="line">    -c, --crop width:height:x:y</span><br><span class="line">        Crop the device screen on the server.</span><br><span class="line">        The values are expressed in the device natural orientation</span><br><span class="line">        (typically, portrait for a phone, landscape for a tablet).</span><br><span class="line">        Any --max-size value is computed on the cropped size.</span><br><span class="line"></span><br><span class="line">    -h, --help  //命令行帮助说明</span><br><span class="line">        Print this help.</span><br><span class="line"></span><br><span class="line">    -m, --max-size value</span><br><span class="line">        Limit both the width and height of the video to value. The</span><br><span class="line">        other dimension is computed so that the device aspect-ratio</span><br><span class="line">        is preserved.</span><br><span class="line">        Default is 0 (unlimited).</span><br><span class="line"></span><br><span class="line">    -p, --port port </span><br><span class="line">        Set the TCP port the client listens on. 设置客户端tcp监听端口</span><br><span class="line">        Default is 27183. 默认是27183</span><br><span class="line"></span><br><span class="line">    -s, --serial</span><br><span class="line">        The device serial number. Mandatory only if several devices 安卓设备序列号</span><br><span class="line">        are connected to adb.</span><br><span class="line"></span><br><span class="line">    -t, --show-touches</span><br><span class="line">        Enable &quot;show touches&quot; on start, disable on quit. 控制安卓设置 触摸显示效果</span><br><span class="line">        It only shows physical touches (not clicks from scrcpy).</span><br><span class="line"></span><br><span class="line">    -v, --version</span><br><span class="line">        Print the version of scrcpy. 显示scrcpy 版本</span><br><span class="line"></span><br><span class="line">Shortcuts: 快捷键</span><br><span class="line"></span><br><span class="line">    Ctrl+f</span><br><span class="line">        switch fullscreen mode  切换显示全屏</span><br><span class="line"></span><br><span class="line">    Ctrl+g</span><br><span class="line">        resize window to 1:1 (pixel-perfect) 切换显示为安卓设备分辨率1:1效果</span><br><span class="line"></span><br><span class="line">    Ctrl+x</span><br><span class="line">    Double-click on black borders 也可以显示界面黑边双击</span><br><span class="line">        resize window to remove black borders 来去除黑边</span><br><span class="line"></span><br><span class="line">    Ctrl+h</span><br><span class="line">    Home</span><br><span class="line">    Middle-click 也可以使用鼠标中键</span><br><span class="line">        click on HOME 来返回home界面</span><br><span class="line"></span><br><span class="line">    Ctrl+b</span><br><span class="line">    Ctrl+Backspace</span><br><span class="line">    Right-click (when screen is on) 当屏幕唤醒时可以使用鼠标右键</span><br><span class="line">        click on BACK 来返回</span><br><span class="line"></span><br><span class="line">    Ctrl+s</span><br><span class="line">        click on APP_SWITCH app切换界面</span><br><span class="line"></span><br><span class="line">    Ctrl+m</span><br><span class="line">        click on MENU 菜单</span><br><span class="line"></span><br><span class="line">    Ctrl+Up</span><br><span class="line">        click on VOLUME_UP 音量加</span><br><span class="line"></span><br><span class="line">    Ctrl+Down</span><br><span class="line">        click on VOLUME_DOWN 音量减</span><br><span class="line"></span><br><span class="line">    Ctrl+p</span><br><span class="line">        click on POWER (turn screen on/off) 控制屏幕开关</span><br><span class="line"></span><br><span class="line">    Right-click (when screen is off) 显示界面黑屏时</span><br><span class="line">        turn screen on 来打开屏幕</span><br><span class="line"></span><br><span class="line">    Ctrl+v</span><br><span class="line">        paste computer clipboard to device 电脑剪贴板的文字粘贴到安卓设备上</span><br><span class="line"></span><br><span class="line">    Ctrl+i</span><br><span class="line">        enable/disable FPS counter (print frames/second in logs) 控制fps的显示</span><br><span class="line"></span><br><span class="line">    Drag &amp; drop APK file 拖动apk文件</span><br><span class="line">        install APK from computer 来安装apk文件</span><br></pre></td></tr></table></figure>


<img src="/images/20200224_scrcpy-多屏协同.png" class="nofancybox"/>

<blockquote>
<p>参考：<br><a href="https://www.iplaysoft.com/scrcpy.html">https://www.iplaysoft.com/scrcpy.html</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>开发环境</title>
    <url>/2020/03/10/20200310_%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h3 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h3><h4 id="编译器"><a href="#编译器" class="headerlink" title="编译器"></a>编译器</h4><ul>
<li><p>AndroidStudio</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">插件：</span><br><span class="line">.ignore, ADB Idea, Alibaba Java Coding Guidelines, Android ButterKnife Zelezny, Android Code Generator, Android Drawable Importer, Android Layout ID Converter, Android Parcelable code generator, Android Styler, Android WiFi ADB, ARouter Helper, CamelCase, CodeGlance, Codota, Copy as HTML, Eclipse Code Formatter, ECTranslation, EventBus3 Intellij Plugin, FindViewByMe, GenerateAllSetter, GsonFormat, HighlightBracketPair, Key Promoter X, Lifecycle Sorter, Lombok, Markdown, Rainbow Brackets, Save Actions, ScreenMatch, search with baidu, search with bing, SelectorChapek for Android, stackoverflow, Statistic, String Manipulation, SVG2VectorDrawable</span><br><span class="line"></span><br><span class="line">配置：</span><br><span class="line">路径 Help -&gt; Edit Custom VM Options 键入</span><br><span class="line">-Xms128m</span><br><span class="line">-Xmx4096m</span><br><span class="line">-XX:MaxPermSize=1024m</span><br><span class="line">-XX:ReservedCodeCacheSize=200m</span><br><span class="line">-XX:+UseCompressedOops</span><br><span class="line"></span><br><span class="line">显示当前Android studio内存大小：在设置 -&gt; Appearance中，勾选Show memory indicator</span><br></pre></td></tr></table></figure></li>
<li><p>IntelliJ IDEA -&gt; 阅读后端代码, Java编程开发、调试代码</p>
</li>
<li><p>Eclipse</p>
</li>
<li><p>Dev-C++ -&gt; 练习算法</p>
</li>
<li><p>Visual Studio Community 2019 -&gt; 练习算法，review开源项目</p>
</li>
<li><p>Source Insight -&gt; 尽量用IDE阅读代码</p>
</li>
</ul>
<h4 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h4><ul>
<li>JAVA </li>
<li>C, C++, C#</li>
<li>Python</li>
<li>Node.js -&gt; Github Pages(hexo + next主题)</li>
<li>MySql -&gt; 数据库</li>
<li>Tomcat -&gt; 服务器</li>
</ul>
<h4 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h4><ul>
<li>为知笔记 -&gt; 网文剪辑</li>
<li>OneNote -&gt; 做笔记</li>
<li>Visual Studio Code -&gt; 写Markdown，实时预览</li>
<li>NotePad++ -&gt; 临时页签容易丢失</li>
<li>Sublime Text 3  <figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"># 插件：</span><br><span class="line">Localization, Package Control, Side Bar, Word Count, ConvertToUTF8, SublimeHighlight</span><br><span class="line"></span><br><span class="line"># 配置：</span><br><span class="line">&#123;</span><br><span class="line">    &quot;color_scheme&quot;: &quot;Packages/<span class="built_in">Color</span> Scheme - Default/Monokai.sublime-<span class="built_in">color</span>-scheme&quot;,</span><br><span class="line">    &quot;ensure_newline_at_eof_on_save&quot;: true,</span><br><span class="line">    &quot;font_face&quot;: &quot;Consolas&quot;,</span><br><span class="line">    &quot;font_size&quot;: <span class="number">13</span>,</span><br><span class="line">    &quot;highligeh_line&quot;: true,</span><br><span class="line">    &quot;ignored_packages&quot;:</span><br><span class="line">    [</span><br><span class="line">        &quot;Vintage&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;save_on_focus_lost&quot;: true,</span><br><span class="line">    &quot;show_encoding&quot;: true,</span><br><span class="line">    &quot;tab_size&quot;: <span class="number">4</span>,</span><br><span class="line">    &quot;theme&quot;: &quot;Adaptive.sublime-theme&quot;,</span><br><span class="line">    &quot;translate_tabs_to_spaces&quot;: true,</span><br><span class="line">    &quot;trim_trailing_white_space_on_save&quot;: true,</span><br><span class="line">    &quot;word_wrap&quot;: &quot;true&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h4><ul>
<li>VMware Workstation Pro -&gt; 单核, 开启intel虚拟化, Win7 快照</li>
<li>Sandboxie -&gt; 沙盒</li>
<li>Windows沙盒</li>
<li>Git</li>
<li>Sourcetree -&gt; 多git账号拉取代码</li>
<li>AutoHotKey  <figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">;==================================================</span><br><span class="line">;** 快捷键 Win+t 使当前窗口置顶</span><br><span class="line">;==================================================</span><br><span class="line">#t::</span><br><span class="line">WinSet, AlwaysOnTop, toggle,A</span><br><span class="line">WinGetTitle, getTitle, A</span><br><span class="line">Winget, getTop,ExStyle,A</span><br><span class="line"><span class="keyword">if</span> (getTop &amp; <span class="number">0</span>x8)</span><br><span class="line">    TrayTip 已置顶, 窗口标题: `n<span class="variable">%getTitle%</span>,<span class="number">10</span>,<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    TrayTip 取消置顶, 窗口标题:`n <span class="variable">%getTitle%</span>,<span class="number">10</span>,<span class="number">1</span></span><br><span class="line">return</span><br></pre></td></tr></table></figure></li>
<li>Current Activity.apk -&gt; 查看当前栈顶Activity  <figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"># 或者<span class="built_in">cmd</span>：</span><br><span class="line">adb shell dumpsys window | <span class="built_in">findstr</span> mCurrentFocus</span><br><span class="line"><span class="built_in">ping</span> <span class="number">127</span>.<span class="number">1</span> -n <span class="number">5</span> &gt;<span class="built_in">nul</span></span><br></pre></td></tr></table></figure></li>
<li>HiJson -&gt; 格式化json</li>
<li>Dorado -&gt; 测量、标注图片dp</li>
<li>Fiddler 4 -&gt; 抓包</li>
<li>FileZilla -&gt; FTP</li>
<li>XMind -&gt; 思维导图</li>
<li>Postman -&gt; 调试接口</li>
<li>Highlight-gui -&gt; 代码转换成html格式粘贴到OneNote，推荐用Sublime插件SublimeHighlight</li>
<li>OBS -&gt; 开源视频录制</li>
<li>Axure RP -&gt; 查看RP格式原型图</li>
<li>Scrcpy -&gt; Android手机无线投屏  <figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">scrcpy -S -m <span class="number">1920</span> -b <span class="number">16</span>M</span><br><span class="line">#-S 关闭手机屏幕    </span><br><span class="line">#-m <span class="number">1920</span> 限制画面分辨率(比如限制为 <span class="number">1920</span>)</span><br><span class="line">#-b <span class="number">16</span>M修改视频码率(默认 <span class="number">8</span>Mbps，改成 <span class="number">16</span>Mbps)</span><br></pre></td></tr></table></figure></li>
<li>Navicat Premium 12 -&gt; 连接数据库</li>
<li>BeyondCompare -&gt; 文本对比</li>
<li>Cmder -&gt; 多视窗分割终端</li>
<li>Genimotion -&gt; Android模拟器，个人free，需安装对应系统版本的ARM包</li>
</ul>
<h3 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h3><h4 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h4><ul>
<li>微信</li>
<li>QQ</li>
<li>钉钉</li>
<li>微软To Do -&gt; UWP</li>
<li>习惯app</li>
<li>欧陆词典（MDX）-&gt; 不推荐Mdict，GoldenDict（不稳定）</li>
<li>猎豹Wifi（无网可用）/Win10移动热点（特别适合Fiddler）</li>
<li>QQ影音</li>
<li>PotPlayer</li>
<li>Firefox</li>
<li>Chrome  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 扩展：</span><br><span class="line">cVIM -&gt; 键盘控制</span><br><span class="line">GitCodeTree, Octotree -&gt; Gitee/Github代码查看</span><br><span class="line">IDM -&gt; 下载</span><br><span class="line">JetBrains IDE Support -&gt; HTML/CSS/JavaScript editing and JavaScript debugging</span><br><span class="line">OneNote Web Clipper -&gt; 网文剪辑</span><br><span class="line">WizClipper -&gt; 为知笔记网文剪辑（推荐为知剪辑，OneNote做笔记）</span><br><span class="line">Tampermonkey -&gt; 脚本管理器</span><br><span class="line">uBlock Origin -&gt; 开源，过滤广告</span><br><span class="line"></span><br><span class="line"># 脚本：</span><br><span class="line">https://greasyfork.org/zh-CN</span><br><span class="line">1. CSDN页面浮窗广告完全过滤净化(净化复制内容|自动展开）</span><br><span class="line">2. AC-baidu:重定向优化百度搜狗谷歌搜索_去广告_favicon_双列</span><br><span class="line">3. Bilibili Evolved -&gt; Bilibili视频批量下载（Aira2）</span><br><span class="line">4. Github助手 -&gt; 添加Github文件下载、复制按钮、图片点击放大</span><br><span class="line">5. 批量删除新浪微博博文</span><br><span class="line">6. 极简知乎</span><br><span class="line">7. 百度网盘直链下载助手</span><br><span class="line">8. 知乎、简书、csdn、实验楼剪切板消毒</span><br></pre></td></tr></table></figure></li>
<li>图片浏览<ul>
<li>HoneyView -&gt; 设置图片编辑器指向FSCapture</li>
</ul>
</li>
<li>图片编辑<ul>
<li>.9图 -&gt; AndroidStudio</li>
<li>GIMP -&gt; 开源</li>
</ul>
</li>
<li>图片压缩<ul>
<li>IrfanView -&gt; 批量压缩（上传Github pages）</li>
<li><a href="https://squoosh.app/">https://squoosh.app/</a> -&gt; Google压缩</li>
</ul>
</li>
<li>视频处理<ul>
<li>MediaCoder -&gt; 格式转换、双音轨、水印</li>
<li>MediaInfo -&gt; 视频信息</li>
<li>丸子工具箱 -&gt; 视频压制</li>
</ul>
</li>
<li>音乐<ul>
<li>QQ音乐 -&gt; 版权多</li>
<li>网易云音乐</li>
</ul>
</li>
<li>FastCopy</li>
<li>iTunes</li>
<li>Kindle</li>
<li>腾讯视频</li>
<li>KeePass 2 -&gt; 密码箱</li>
<li>Dell Display Manager -&gt; Dell显示器分屏</li>
<li>护眼<ul>
<li>Workrave -&gt; 开源</li>
<li>ProjectEye -&gt; <a href="https://github.com/Planshit/ProjectEye/releases">https://github.com/Planshit/ProjectEye/releases</a></li>
<li>护眼卫士 eyefoo.com</li>
<li>定时休息提醒.bat -&gt; 放置到计划任务定时  <figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">:: 设置倒计时<span class="number">20</span>秒</span><br><span class="line">@<span class="built_in">echo</span> 休息时间到了，休息一下吧!</span><br><span class="line">@choice /t <span class="number">1</span> /d y /n &gt;<span class="built_in">nul</span></span><br><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">setlocal</span> enabledelayedexpansion</span><br><span class="line"><span class="keyword">for</span> /l <span class="variable">%%a</span> <span class="keyword">in</span> (<span class="number">20</span>,-<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">do</span> (</span><br><span class="line">    <span class="built_in">set</span> ss=<span class="variable">%%a</span></span><br><span class="line">    <span class="built_in">echo</span> 倒计时 <span class="variable">!ss!</span></span><br><span class="line">    @choice /t <span class="number">1</span> /d y /n &gt;<span class="built_in">nul</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">echo</span> 好好工作，天天向上！</span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>WPS Pro企业版</li>
<li>Adobe Acrobat XI Pro -&gt; 网页、Word转成Pdf格式做笔记</li>
<li>7Zip -&gt; 压缩</li>
<li>Eveything -&gt; 搜索</li>
<li>Foxmail -&gt; 腾讯/网易邮件</li>
<li>OneDrive -&gt; 网盘</li>
<li>FSCapture, Snipaste(UWP) -&gt; 滚动截图、录屏，两者配合用</li>
<li>天若OCR -&gt; 文字识别，或转pdf识别，或pdf转成html识别</li>
<li>VeraCrypt -&gt; 加密</li>
<li>TrafficMonitor -&gt; 开源，任务栏流量、CPU、内存检视, 或pcmaster流量检视</li>
<li>SumatraPDF -&gt; 辅助使用pdf，可打开epub格式文件</li>
<li>ScreenToGif -&gt; 开源，Gif制作</li>
<li>QuickLook -&gt; 开源，空格键快速浏览文件</li>
</ul>
<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><ul>
<li>迅雷</li>
<li>Motrix</li>
<li>IDM</li>
<li>百度网盘（离线下载） -&gt; 配合猴油脚本直链下载，或Aria2下载</li>
<li>Aria2网址 -&gt; 需配合Aria2工具  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://aria2c.com/</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="杀毒"><a href="#杀毒" class="headerlink" title="杀毒"></a>杀毒</h4><ul>
<li>火绒</li>
<li><a href="https://www.virscan.org/language/zh-cn/">https://www.virscan.org/language/zh-cn/</a></li>
<li><a href="https://www.virustotal.com/gui/jsp">https://www.virustotal.com/gui/jsp</a></li>
</ul>
<h4 id="维护"><a href="#维护" class="headerlink" title="维护"></a>维护</h4><ul>
<li>Dism++ -&gt; 开源，备份系统</li>
<li>傲梅磁盘分区助手 -&gt; 可对运行中的C盘进行磁盘容量扩大</li>
<li>傲梅轻松备份</li>
<li>DiskGenius -&gt; 修复坏道</li>
<li>SpacesNiffer, WinDirStat -&gt; 磁盘详情</li>
<li>CrystalDiskInfo -&gt; 磁盘状态</li>
<li>CPU-Z, AID64 -&gt; 硬件概览</li>
<li>Samsung Data Migration -&gt; SSD换硬盘系统迁移</li>
</ul>
<h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><ul>
<li><p>将文件夹下所有文件包括子文件列出来</p>
  <figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">TREE</span> /F /A &gt;LIST.TXT</span><br></pre></td></tr></table></figure></li>
<li><p>提取目录下所有文件名字到Excel</p>
  <figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cls</span></span><br><span class="line">@<span class="built_in">ECHO</span> OFF</span><br><span class="line"><span class="built_in">CLS</span></span><br><span class="line"><span class="built_in">color</span> <span class="number">0</span>E</span><br><span class="line"></span><br><span class="line"><span class="keyword">GOTO</span> MENU</span><br><span class="line">:MENU</span><br><span class="line"><span class="built_in">ECHO</span>.</span><br><span class="line"><span class="built_in">ECHO</span>.┌───获取当前目录所有文件文件名───┐</span><br><span class="line"><span class="built_in">ECHO</span>.　　　　　　　　　　　                       　  </span><br><span class="line"><span class="built_in">ECHO</span>.    <span class="number">1</span>  获取文件名字　                                     　</span><br><span class="line"><span class="built_in">ECHO</span>.　　　　　　　　　　　　                        </span><br><span class="line"><span class="built_in">ECHO</span>.    <span class="number">2</span>  退   出                                                  </span><br><span class="line"><span class="built_in">ECHO</span>.                              </span><br><span class="line"><span class="built_in">ECHO</span>.　　　　　　　　　　　　                       </span><br><span class="line"><span class="built_in">echo</span>.└──────请输入选择项目的序号──────┘</span><br><span class="line"><span class="built_in">set</span> /p  ID=</span><br><span class="line"><span class="keyword">if</span> &quot;<span class="variable">%id%</span>&quot;==&quot;<span class="number">1</span>&quot;  <span class="keyword">goto</span> cmd1</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> &quot;<span class="variable">%id%</span>&quot;==&quot;<span class="number">2</span>&quot; <span class="keyword">exit</span></span><br><span class="line"><span class="built_in">PAUSE</span></span><br><span class="line"></span><br><span class="line">:cmd1</span><br><span class="line"></span><br><span class="line"><span class="built_in">dir</span> *.* /b &gt;目录名字.xls</span><br><span class="line"><span class="built_in">echo</span> 成功输出到文件目录名字.xls</span><br><span class="line"><span class="built_in">echo</span> 请使用Excel编辑。</span><br><span class="line"><span class="keyword">GOTO</span> MENU</span><br></pre></td></tr></table></figure></li>
<li><p>启动activity, 发送广播</p>
  <figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">adb shell am <span class="built_in">start</span> -n com.ycchen.dev/.test.activity.AttributesActivity</span><br><span class="line">adb shell am broadcast -a action</span><br></pre></td></tr></table></figure></li>
<li><p>清理apk缓存.bat -&gt; 或Androidstudio adb插件清理</p>
  <figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">adb shell pm clear com.ycchen.dev</span><br></pre></td></tr></table></figure></li>
<li><p>无线投屏</p>
  <figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">scrcpy -S -m <span class="number">1920</span> -b <span class="number">16</span>M</span><br></pre></td></tr></table></figure></li>
<li><p>获取当前运行的栈顶Activity</p>
  <figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys window | <span class="built_in">findstr</span> mCurrentFocus</span><br><span class="line"><span class="built_in">ping</span> <span class="number">127</span>.<span class="number">1</span> -n <span class="number">5</span> &gt;<span class="built_in">nul</span></span><br></pre></td></tr></table></figure></li>
<li><p>定时5小时关机</p>
  <figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">shutdown -s -f -t <span class="number">18000</span></span><br></pre></td></tr></table></figure></li>
<li><p>边界布局</p>
  <figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">打开边界布局：</span><br><span class="line">adb shell setprop debug.layout true</span><br><span class="line"></span><br><span class="line">关闭边界布局：</span><br><span class="line">adb shell setprop debug.layout false</span><br></pre></td></tr></table></figure></li>
<li><p>截图并拉取到桌面</p>
  <figure class="highlight bat"><table><tr><td class="code"><pre><span class="line"><span class="comment">rem 根据当前日期获取，年月日串</span></span><br><span class="line"><span class="built_in">set</span> yyyy=<span class="variable">%date:~,4%</span></span><br><span class="line"><span class="built_in">set</span> mm=<span class="variable">%date:~5,2%</span></span><br><span class="line"><span class="built_in">set</span> day=<span class="variable">%date:~8,2%</span></span><br><span class="line"><span class="built_in">set</span> &quot;YYYYmmdd=<span class="variable">%yyyy%</span><span class="variable">%mm%</span><span class="variable">%day%</span>&quot;</span><br><span class="line"><span class="comment">rem 把年月日串中的空格替换为0</span></span><br><span class="line"><span class="built_in">set</span> &quot;YYYYmmdd=%YYYYmmdd: =<span class="number">0</span>%&quot;</span><br><span class="line"><span class="built_in">echo</span> &quot;YYYYmmdd<span class="variable">%YYYYmmdd%</span>YYYYmmdd&quot;</span><br><span class="line"><span class="comment">rem 根据当前时间获取，时分秒串</span></span><br><span class="line"><span class="built_in">set</span> hh=<span class="variable">%time:~0,2%</span></span><br><span class="line"><span class="built_in">set</span> mi=<span class="variable">%time:~3,2%</span></span><br><span class="line"><span class="built_in">set</span> ss=<span class="variable">%time:~6,2%</span></span><br><span class="line"><span class="built_in">set</span> &quot;hhmiss=<span class="variable">%hh%</span><span class="variable">%mi%</span><span class="variable">%ss%</span>&quot;</span><br><span class="line"><span class="built_in">set</span> &quot;hhmiss=%hhmiss: =<span class="number">0</span>%&quot;</span><br><span class="line"><span class="built_in">echo</span> &quot;hhmiss<span class="variable">%Time%</span>hhmiss&quot;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%hhmiss%</span></span><br><span class="line"><span class="comment">rem 把时间串中的:替换为0</span></span><br><span class="line"><span class="built_in">set</span> &quot;hhmiss=<span class="variable">%hhmiss::=0%</span>&quot;</span><br><span class="line"><span class="comment">rem 把时间串中的空格替换为0</span></span><br><span class="line"><span class="built_in">set</span> &quot;hhmiss=%hhmiss: =<span class="number">0</span>%&quot;</span><br><span class="line"><span class="comment">rem 根据日期时间生成文件名称，中间以HH区分日期和时间部分</span></span><br><span class="line"><span class="built_in">set</span> &quot;filename=<span class="variable">%YYYYmmdd%</span>--<span class="variable">%hhmiss%</span>.png&quot;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">%filename%</span></span><br><span class="line">adb shell <span class="built_in">mkdir</span> /sdcard/PhoneScreenshots</span><br><span class="line">adb shell rm -rf /sdcard/PhoneScreenshots/*</span><br><span class="line">adb shell screencap -p /sdcard/PhoneScreenshots/<span class="variable">%filename%</span></span><br><span class="line">adb pull /sdcard/PhoneScreenshots C:\Users\smile\Desktop</span><br><span class="line">————————————————</span><br><span class="line">版权声明：本文为CSDN博主「xuexiaodong2009」的原创文章，遵循 CC <span class="number">4</span>.<span class="number">0</span> BY-SA 版权协议，转载请附上原文出处链接及本声明。</span><br><span class="line">原文链接：https://blog.csdn.<span class="built_in">net</span>/xuexiaodong009/article/details/<span class="number">53462592</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>卸载apk</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb uninstall com.ycchen.dev</span><br></pre></td></tr></table></figure></li>
<li><p>安装apk</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb install -r D:\Temp\test.apk</span><br></pre></td></tr></table></figure></li>
<li><p>MySql</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 启动MySQL：</span><br><span class="line">net start mysql</span><br><span class="line">pause</span><br><span class="line"></span><br><span class="line"># 停止MySQ：</span><br><span class="line">net stop mysql</span><br><span class="line">pause</span><br></pre></td></tr></table></figure></li>
<li><p>Tomcat -&gt; 内置shutdown.bat，和startup.bat脚本</p>
</li>
<li><p>获取包名</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pm list packages &gt; list.txt</span><br></pre></td></tr></table></figure></li>
<li><p>语音助手</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pm disable-user com.huawei.vassistant</span><br></pre></td></tr></table></figure></li>
<li><p>禁用视频</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pm disable-user com.huawei.himovie</span><br></pre></td></tr></table></figure></li>
<li><p>禁用音乐</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pm disable-user com.android.mediacenter</span><br></pre></td></tr></table></figure></li>
<li><p>禁用系统更新提醒（PS，应用管理禁止联网无法解决，只能adb）</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pm disable-user com.huawei.android.hwouc</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>统计文件夹视频总时长</title>
    <url>/2020/03/29/20200319_%E7%BB%9F%E8%AE%A1%E6%96%87%E4%BB%B6%E5%A4%B9%E8%A7%86%E9%A2%91%E6%80%BB%E6%97%B6%E9%95%BF/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> moviepy.editor <span class="keyword">import</span> VideoFileClip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sec_to_hours</span>(<span class="params">seconds</span>):</span></span><br><span class="line">    hours = seconds//<span class="number">3600</span></span><br><span class="line">    mins = (seconds % <span class="number">3600</span>)//<span class="number">60</span></span><br><span class="line">    seconds = (seconds % <span class="number">3600</span>) % <span class="number">60</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;hours&#x27;</span>: hours, <span class="string">&#x27;mins&#x27;</span>: mins, <span class="string">&#x27;seconds&#x27;</span>: seconds&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    filelist = []</span><br><span class="line">    <span class="keyword">for</span> a, b, c <span class="keyword">in</span> os.walk(sys.argv[<span class="number">1</span>]):</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> c:</span><br><span class="line">            fname = os.path.join(a, name)</span><br><span class="line">            <span class="keyword">if</span> fname.endswith((<span class="string">&#x27;.mp4&#x27;</span>, <span class="string">&#x27;.mkv&#x27;</span>, <span class="string">&#x27;.avi&#x27;</span>, <span class="string">&#x27;.wmv&#x27;</span>, <span class="string">&#x27;.rmvb&#x27;</span>, <span class="string">&#x27;.flv&#x27;</span>)):</span><br><span class="line">                filelist.append(fname)</span><br><span class="line">    ftime = <span class="number">0.0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> filelist:</span><br><span class="line">        clip = VideoFileClip(item)</span><br><span class="line">        ftime += clip.duration</span><br><span class="line">        clip.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;%(hours)d hours %(mins)d mins %(seconds)d seconds&quot;</span> %</span><br><span class="line">          sec_to_hours(ftime))</span><br></pre></td></tr></table></figure>

<img src="/images/20200329_统计文件夹视频总时长.png" class="nofancybox"/>]]></content>
  </entry>
  <entry>
    <title>一键转换后端代码的4种工具</title>
    <url>/2020/03/20/20200320_%E4%B8%80%E9%94%AE%E8%BD%AC%E6%8D%A2%E5%90%8E%E7%AB%AF%E4%BB%A3%E7%A0%81%E7%9A%844%E7%A7%8D%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h4 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h4><p><a href="https://github.com/chenyinchao/ConvertData">https://github.com/chenyinchao/ConvertData</a></p>
<h4 id="背景和目的"><a href="#背景和目的" class="headerlink" title="背景和目的"></a>背景和目的</h4><p>一键生成，减少工作量，保证数据百分之百完整，不会出错</p>
<h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><ol>
<li>打包成jar <figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">java -jar /c/Users/algorithms/Desktop/ConvertData.jar /c/Users/smile/Desktop/test.java</span><br></pre></td></tr></table></figure></li>
<li>直接编译源码</li>
</ol>
<h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>目前包含四种转换情况：</p>
<ol>
<li>根据后端JavaBean转换成Android端的JavaBean</li>
<li>根据后端JavaBean生成get方法 —》 Android插件“Generate all setter ”可以生成set方法</li>
<li>根据后端API注释生成Android端RxHttp请求的形参</li>
<li>根据后端API注释生成Android端RxHttp请求的.add()方法</li>
</ol>
<h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><img src="/images/20200320_转换后端数据场景1.png" class="nofancybox"/>
<img src="/images/20200320_转换后端数据场景2.png" class="nofancybox"/>
<img src="/images/20200320_转换后端数据场景3.png" class="nofancybox"/>
<img src="/images/20200320_转换后端数据场景4.png" class="nofancybox"/>]]></content>
  </entry>
  <entry>
    <title>常用正则表达式</title>
    <url>/2020/01/17/20190117_%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h5 id="去掉代码行号"><a href="#去掉代码行号" class="headerlink" title="去掉代码行号"></a>去掉代码行号</h5><p>^\d+</p>
]]></content>
  </entry>
  <entry>
    <title>Android屏幕适配方案</title>
    <url>/2020/04/16/20200411_%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h4 id="计算公式"><a href="#计算公式" class="headerlink" title="计算公式"></a>计算公式</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">px = density * dp;</span><br><span class="line"></span><br><span class="line">density = dpi / 160;</span><br><span class="line"></span><br><span class="line">px = dp * (dpi / 160);</span><br></pre></td></tr></table></figure>

<h4 id="屏幕尺寸、分辨率、像素密度"><a href="#屏幕尺寸、分辨率、像素密度" class="headerlink" title="屏幕尺寸、分辨率、像素密度"></a>屏幕尺寸、分辨率、像素密度</h4><img src="/images/20200416_屏幕适配方案1.png" class="nofancybox"/>

<h3 id="几种方案"><a href="#几种方案" class="headerlink" title="几种方案"></a>几种方案</h3><h4 id="基于今日头条的方案适配（修改density，无入侵式）"><a href="#基于今日头条的方案适配（修改density，无入侵式）" class="headerlink" title="基于今日头条的方案适配（修改density，无入侵式）"></a>基于今日头条的方案适配（修改density，无入侵式）</h4><ul>
<li><p>今日头条方案适配<br><a href="https://mp.weixin.qq.com/s/d9QCoBP6kV9VSWvVldVVwA">https://mp.weixin.qq.com/s/d9QCoBP6kV9VSWvVldVVwA</a></p>
<blockquote>
<p>从dp和px的转换公式 ：px = dp * density<br>可以看出，如果设计图宽为360dp，想要保证在所有设备计算得出的px值都正好是屏幕宽度的话，我们只能修改 density 的值。</p>
</blockquote>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScreenAdapterUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">float</span> appDensity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">float</span> appScaledDensity;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DisplayMetrics appDisplayMetrics;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> barHeight;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDensity</span><span class="params">(<span class="meta">@NonNull</span> Application application)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取application的DisplayMetrics</span></span><br><span class="line">        appDisplayMetrics = application.getResources().getDisplayMetrics();</span><br><span class="line">        <span class="comment">// 获取状态栏高度</span></span><br><span class="line">        barHeight = ScreenUtil.getStatusBarHeight(application);<span class="comment">// 改变density前，提前获取状态栏的高度</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (appDensity == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 初始化的时候赋值</span></span><br><span class="line">            appDensity = appDisplayMetrics.density;</span><br><span class="line">            appScaledDensity = appDisplayMetrics.scaledDensity;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 添加字体变化的监听</span></span><br><span class="line">            application.registerComponentCallbacks(<span class="keyword">new</span> ComponentCallbacks() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConfigurationChanged</span><span class="params">(Configuration newConfig)</span> </span>&#123;</span><br><span class="line">                    <span class="comment">// 字体改变后,将appScaledDensity重新赋值</span></span><br><span class="line">                    <span class="keyword">if</span> (newConfig != <span class="keyword">null</span> &amp;&amp; newConfig.fontScale &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        appScaledDensity = application.getResources().getDisplayMetrics().scaledDensity;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLowMemory</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此方法在BaseActivity中做初始化(如果不封装BaseActivity的话,直接用下面那个方法就好)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDefault</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ScreenUtils.isPortrait()) &#123;</span><br><span class="line">            setAppOrientation(activity, ScreenUtil.WIDTH);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setAppOrientation(activity, ScreenUtil.HEIGHT);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此方法用于在某一个Activity里面更改适配的方向</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setOrientation</span><span class="params">(Activity activity, String orientation)</span> </span>&#123;</span><br><span class="line">        setAppOrientation(activity, orientation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * targetDensity targetScaledDensity targetDensityDpi 这三个参数是统一修改过后的值</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;</span></span><br><span class="line"><span class="comment">    * orientation:方向值,传入width或height</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setAppOrientation</span><span class="params">(<span class="meta">@Nullable</span> Activity activity, String orientation)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> targetDensity;</span><br><span class="line">        <span class="comment">// 竖屏以最小宽度适配</span></span><br><span class="line">        <span class="keyword">if</span> (orientation.equals(ScreenUtil.HEIGHT)) &#123;</span><br><span class="line">            targetDensity = (appDisplayMetrics.heightPixels - barHeight) / <span class="number">600f</span>;<span class="comment">// 此处的667f替换为你的实际值</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            targetDensity = appDisplayMetrics.widthPixels / <span class="number">360f</span>;<span class="comment">// 此处的360f替换为你的实际值</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> targetScaledDensity = targetDensity * (appScaledDensity / appDensity);</span><br><span class="line">        <span class="keyword">int</span> targetDensityDpi = (<span class="keyword">int</span>)(<span class="number">160</span> * targetDensity);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 最后在这里将修改过后的值赋给系统参数</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 只修改Activity的density值</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        DisplayMetrics activityDisplayMetrics = activity.getResources().getDisplayMetrics();</span><br><span class="line">        activityDisplayMetrics.density = targetDensity;</span><br><span class="line">        activityDisplayMetrics.scaledDensity = targetScaledDensity;</span><br><span class="line">        activityDisplayMetrics.densityDpi = targetDensityDpi;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScreenUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String WIDTH = <span class="string">&quot;width&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String HEIGHT = <span class="string">&quot;height&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取手机状态栏高度</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getStatusBarHeight</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> resourceId = context.getResources().getIdentifier(<span class="string">&quot;status_bar_height&quot;</span>, <span class="string">&quot;dimen&quot;</span>, <span class="string">&quot;android&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (resourceId &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            result = context.getResources().getDimensionPixelSize(resourceId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>AndroidAutoSize<br>  <a href="https://github.com/JessYanCoding/AndroidAutoSize">https://github.com/JessYanCoding/AndroidAutoSize</a><br>  不过对横屏适配需要在 AndroidManifest 中另写横屏的全局设计图尺寸 </p>
</li>
<li><p>Blankj 屏幕适配<br>  集成在<a href="https://github.com/Blankj/AndroidUtilCode%E5%BA%93%E7%9A%84AdaptScreen">https://github.com/Blankj/AndroidUtilCode库的AdaptScreen</a> 相关 -&gt; AdaptScreenUtils.java -&gt; Demo<br>  <a href="https://www.jianshu.com/p/7da141e682c7">https://www.jianshu.com/p/7da141e682c7</a><br>  适配需要修改dimens中dp为pt单位才能适配</p>
</li>
</ul>
<h4 id="smallestWidth-限定符适配"><a href="#smallestWidth-限定符适配" class="headerlink" title="smallestWidth 限定符适配"></a>smallestWidth 限定符适配</h4><ul>
<li>需要用工具生成基于设计图尺寸下所有smallestWidth对应dimens</li>
<li>AndroidStudio插件ScreenMatch<blockquote>
<p>smallestWidth 限定符适配寻找 dimens.xml 文件的原理是从大往小找，例如设备的最小宽度为 360dp，就会先去找 values-360dp，发现没有则会向下找 values-320dp，如果还是没有才找默认的 values 下的 demens.xml 文件</p>
</blockquote>
</li>
</ul>
<h4 id="布局限定符适配-—-gt-（平板）横屏适配"><a href="#布局限定符适配-—-gt-（平板）横屏适配" class="headerlink" title="布局限定符适配 —&gt; （平板）横屏适配"></a>布局限定符适配 —&gt; （平板）横屏适配</h4><ul>
<li>只适用于一款App在手机和平板上要显示不同的布局，但是数据源一致。  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layout-sw600dp-land</span><br><span class="line">layout-sw600dp</span><br><span class="line">layout</span><br><span class="line">layout-land</span><br><span class="line">values-sw600dp</span><br><span class="line">values-sw600dp-land</span><br><span class="line">drawable-sw600dp-mdpi</span><br><span class="line">drawable-sw600dp-xxxhdpi</span><br><span class="line">drawable-sw600dp-xxhdpi</span><br><span class="line">drawable-sw600dp-hdpi</span><br></pre></td></tr></table></figure>
<h3 id="几种方案优缺点"><a href="#几种方案优缺点" class="headerlink" title="几种方案优缺点"></a>几种方案优缺点</h3></li>
<li>今日头条方案<blockquote>
<p>优点:</p>
<ol>
<li>支持以宽或者高任意一个维度去适配，保持该维度上和设计图一致</li>
<li>支持dp和sp单位，控制迁移成本到最小</li>
</ol>
<p>缺点:</p>
<ol>
<li>density的计算结果可能精度不够，从而导致适配出现偏差<br>由于头条的适配方案是以手机设备为测试标准，手机的宽度往往可以直接整除，而手机的高度（或平板的宽度）则不一定可以被整除，如果以手机高度（或平板宽度）作为density的计算因子，最后得出的density值可能会有小数。 但是今日头条给出的方法，做除法后结果会取整，从而会影响精度。</li>
<li>计算状态栏和导航栏的高度会出错<br>由于使用的是 Application#getResources，这会导致最后计算状态栏高度使用的是修改过后的 density。</li>
<li>跳出本应用后再返回，适配会失效，比如在应用内启动相机拍照（如上传头像），拍完照返回应用时，头条适配会失效。</li>
</ol>
</blockquote>
</li>
<li>smallestWidth 限定符适配<blockquote>
<p>优点：</p>
<ol>
<li>参照上述smallestWidth 限定符适配对屏幕分辨率限定符的比较优势</li>
<li>根据设计图的最小宽度配置基准dp后，设计图标注多少 dp，布局中就写多少 dp。</li>
<li>可以一键生成所有需要适配的尺寸文件</li>
</ol>
<p>缺点</p>
<ol>
<li>最小宽度为 392.7272 与 411.4285 的手机不能达到完全适配。原因是该插件的默认值都是取整的，即 392.7272 与 411.4285 在插件中写的是 392 与 411。</li>
<li>因为是基于smallestWidth 限定符适配原理，所以只能根据最小宽度来设定基准dp，即只适用于短边固定，长边可滚动的UI设计图，这对手机来说没有问题，但是对横屏设计的平板来说就是一个缺陷，通常横屏设计的平板UI设计图是长边固定，短边可滚动，这就要求横屏设计的平板需要以最大宽度（即长边）来设定基准dp——ScreenMatch无法实现。</li>
</ol>
</blockquote>
</li>
</ul>
<h3 id="计算屏幕各种参数的工具"><a href="#计算屏幕各种参数的工具" class="headerlink" title="计算屏幕各种参数的工具"></a>计算屏幕各种参数的工具</h3><p>项目地址：<a href="https://github.com/chenyinchao/ScreenTools">https://github.com/chenyinchao/ScreenTools</a></p>
<img src="/images/20200416_屏幕适配方案2.png" class="nofancybox"/>


<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote>
<p><a href="https://mp.weixin.qq.com/s/d9QCoBP6kV9VSWvVldVVwA">https://mp.weixin.qq.com/s/d9QCoBP6kV9VSWvVldVVwA</a><br>  <a href="https://www.jianshu.com/p/e715c4496bb3">https://www.jianshu.com/p/e715c4496bb3</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>消息驱动机制</title>
    <url>/2020/01/09/20200109_%E6%B6%88%E6%81%AF%E9%A9%B1%E5%8A%A8%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h4 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h4><p>可以理解：一个扫描框在Activity里，并且Activity放着2个fragment，从Activity扫描框获取scancode, 并在fragment拿到scancode请求网络</p>
<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><ol>
<li>在Activity里监听扫描框Enter结束作为事件来源</li>
<li>两个fragment作为观察者实现HandlerSuccessMessage接口</li>
<li>当在接收到事件来源后，遍历两个fragment并发送消息（接口回调）, 然后在各自fragment实现拿到scancode</li>
<li>最后在各种fragment过滤filter不是这tab相关的消息</li>
</ol>
<p>简而言之，Activity同时发送消息，两个fragment同时接收消息并滤处理</p>
<blockquote>
<p>引申，在遍历的时候可以remove观察者集合，即选择性发送消息，起到过滤</p>
</blockquote>
<img src="/images/20200109_消息驱动机制.png" class="nofancybox"/>

<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p><a href="https://blog.csdn.net/wangbin_jxust/article/details/12522269">https://blog.csdn.net/wangbin_jxust/article/details/12522269</a></p>
]]></content>
  </entry>
  <entry>
    <title>数据结构与算法-绪论</title>
    <url>/2020/05/02/20200501_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95-%E7%BB%AA%E8%AE%BA/</url>
    <content><![CDATA[<h2 id="第一章：数据结构的基本概念"><a href="#第一章：数据结构的基本概念" class="headerlink" title="第一章：数据结构的基本概念"></a>第一章：数据结构的基本概念</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul>
<li>在任何问题中，数据元素都不是孤立存在的，而是在它们之间存在着某种关系，这种数据元素相互之间的关系称为结构（Structure）。数据结构是相互之间存在一种或多种特定关系的数据元素的集合。数据结构包括三方面的内容：逻辑结构、存储结构和数据的运算。数据的逻辑结构和存储结构是密不可分的两个方面，一个算法的设计取决于所选定的逻辑结构，而算法的实现依赖于所采用的存储结构。<h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h3></li>
<li>逻辑结构是指数据元素之间的逻辑关系，即从逻辑关系上描述数据。它与数据的存储无关，是独立于计算机的</li>
<li>数据的逻辑结构分为线性结构和非线性结构<ul>
<li>集合 结构中的数据元素之间除了“同属于一个集合”的关系外，别无其他关系。 类似于数学上的集合</li>
<li>线性结构 结构中的数据元素之间只存在一对一的关系。比如排队</li>
<li>树形结构 结构中的数据元素之间存在一对多的关系。比如家族族谱</li>
<li>图状结构或网状结构 结构中的数据元素之间存在多对多的关系。 比如地图<h3 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h3></li>
</ul>
</li>
<li>存储结构是指数据结构在计算机中的表示（又称映像），也称物理结构。它包括数据元素的表示和关系的表示。数据的存储结构是逻辑结构用计算机语言的实现，它依赖于计算机语言。数据的存储结构主要有：顺序存储、链式存储、索引存储和散列存储。<ul>
<li>顺序存储：存储的物理位置相邻。（p.s. 物理位置即信息在计算机中的位置。）</li>
<li>链接存储：存储的物理位置未必相邻，通过记录相邻元素的物理位置来找到相邻元素。</li>
<li>索引存储：类似于目录，以后可以联系操作系统的文件系统章节来理解。</li>
<li>散列存储：通过关键字直接计算出元素的物理地址（以后详解）。<h3 id="算法的五个特征"><a href="#算法的五个特征" class="headerlink" title="算法的五个特征"></a>算法的五个特征</h3></li>
</ul>
</li>
<li>1，有穷性：有限步之后结束</li>
<li>2，确定性：不存在二义性，即没有歧义</li>
<li>3，可行性：比如受限于计算机的计算能力，有些算法虽然理论上可行，但实际上无法完成。</li>
<li>4，输入：能被计算机处理的各种类型数据，如数字，音频，图像等等。</li>
<li>5，输出：一至多个程序输出结果。<h3 id="算法的复杂度"><a href="#算法的复杂度" class="headerlink" title="算法的复杂度"></a>算法的复杂度</h3></li>
<li>时间复杂度：<ul>
<li>• 它用来衡量算法随着问题规模增大，算法执行时间增长的快慢；</li>
<li>• 是问题规模的函数：T(n)是时间规模函数 时间复杂度主要分析T(n)的数量级</li>
<li>• T(n)=O(f(n)) f(n)是算法中基本运算的频度 一般我们考虑最坏情况下的时间复杂度</li>
</ul>
</li>
<li>空间复杂度：<ul>
<li>• 它用来衡量算法随着问题规模增大，算法所需空间的快慢；</li>
<li>• 是问题规模的函数：S(n)=O(g(n)) ；算法所需空间的增长率和g(n)的增长率相同。<h3 id="概要-复杂度计算为重点"><a href="#概要-复杂度计算为重点" class="headerlink" title="概要: 复杂度计算为重点"></a>概要: 复杂度计算为重点</h3></li>
</ul>
</li>
<li>常用的时间复杂度大小关系：</li>
<li>复杂度如何计算<ul>
<li>时间复杂度计算（单个循环体）<ul>
<li>直接关注循环体的执行次数，设为k </li>
</ul>
</li>
<li>时间复杂度计算（多个循环体）<ul>
<li>两个运算规则：乘法规则，加法规则。</li>
</ul>
</li>
</ul>
</li>
</ul>
<img src="/images/数据结构/assets/数据结构-绪论.jpg" class="nofancybox"/>]]></content>
  </entry>
  <entry>
    <title>Android二维码扫描实现</title>
    <url>/2020/05/13/20200513_Android%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%89%AB%E6%8F%8F%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.zxing.android.CaptureActivity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DECODED_CONTENT_KEY = <span class="string">&quot;codedContent&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DECODED_BITMAP_KEY = <span class="string">&quot;codedBitmap&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_CODE_SCAN = <span class="number">0x0000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Button btn_scan;</span><br><span class="line">    <span class="keyword">private</span> TextView tv_scanResult;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        tv_scanResult = (TextView) findViewById(R.id.tv_scanResult);</span><br><span class="line">        btn_scan = (Button) findViewById(R.id.btn_scan);</span><br><span class="line">        btn_scan.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</span><br><span class="line">            <span class="keyword">case</span> R.id.btn_scan:</span><br><span class="line">                <span class="comment">//动态权限申请</span></span><br><span class="line">                <span class="keyword">if</span> (ContextCompat.checkSelfPermission(MainActivity.<span class="keyword">this</span>, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                    ActivityCompat.requestPermissions(MainActivity.<span class="keyword">this</span>, <span class="keyword">new</span> String[]&#123;Manifest.permission.CAMERA&#125;, <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    goScan();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳转到扫码界面扫码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">goScan</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>, CaptureActivity.class);</span><br><span class="line">        startActivityForResult(intent, REQUEST_CODE_SCAN);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="meta">@NonNull</span> String[] permissions, <span class="meta">@NonNull</span> <span class="keyword">int</span>[] grantResults)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (requestCode) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> (grantResults.length &gt; <span class="number">0</span> &amp;&amp; grantResults[<span class="number">0</span>] == PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                    goScan();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Toast.makeText(<span class="keyword">this</span>, <span class="string">&quot;你拒绝了权限申请，可能无法打开相机扫码哟！&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</span><br><span class="line">        <span class="comment">// 扫描二维码/条码回传</span></span><br><span class="line">        <span class="keyword">if</span> (requestCode == REQUEST_CODE_SCAN &amp;&amp; resultCode == RESULT_OK) &#123;</span><br><span class="line">            <span class="keyword">if</span> (data != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//返回的文本内容</span></span><br><span class="line">                String content = data.getStringExtra(DECODED_CONTENT_KEY);</span><br><span class="line">                <span class="comment">//返回的BitMap图像</span></span><br><span class="line">                Bitmap bitmap = data.getParcelableExtra(DECODED_BITMAP_KEY);</span><br><span class="line">                tv_scanResult.setText(<span class="string">&quot;你扫描到的内容是：&quot;</span> + content);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考：<a href="https://www.cnblogs.com/xch-yang/p/9418493.html">https://www.cnblogs.com/xch-yang/p/9418493.html</a><br>动态权限申请流程：<br>首先判断用户是不是已经给我们权限授权了，使用ContextCompat.checkSelfPermission()方法，第一个参数是Context，第二个参数是具体的权限名称，如果等于PackageManager.PERMISSION_GRANTED表明已授权，不等于就是没有授权。<br>如果已授权就直接做后面的操作，如果没有授权，需要调用ActivityCompat.requestPermissions()方法申请授权，第一个参数是当前Activity实例，第二个参数是权限数组，第三个是请求码。<br>用户的选择将会回调到onRequestPermissionsResult()方法中，授权结果封装在grantResults参数中，如果grantResults长度大于0且grantResults[0]等于PackageManager.PERMISSION_GRANTED，也就是上面权限数组中加入的第一个打开摄像头的权限被授权，则可跳转至扫描界面扫码，否则提示用户未打开权限无法使用。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Android WebSocket即时通信</title>
    <url>/2020/05/15/20200515_Android%20WebSocket%E5%8D%B3%E6%97%B6%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> WebSocketClient mWebSocketClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">WebSocketHelper</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> WebSocketHelper instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> WebSocketHelper <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> WebSocketHelper();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化websocket</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> address websocket通信，&quot;ws://127.0.0.1:10000&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initSockect</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        LogUtils.i(<span class="string">&quot;initSockect&quot;</span>);</span><br><span class="line">        URI uri = URI.create(address);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == mWebSocketClient) &#123;</span><br><span class="line">            mWebSocketClient = <span class="keyword">new</span> WebSocketClient(uri) &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(ServerHandshake serverHandshake)</span> </span>&#123;</span><br><span class="line">                    LogUtils.i(<span class="string">&quot;onOpen: &quot;</span> + serverHandshake.getHttpStatusMessage());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">                    LogUtils.i(<span class="string">&quot;onMessage: &quot;</span> + s);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">(<span class="keyword">int</span> i, String s, <span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">                    LogUtils.i(<span class="string">&quot;onClose: &quot;</span> + s);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">                    LogUtils.i(<span class="string">&quot;onError: &quot;</span> + e.getMessage());</span><br><span class="line">                    <span class="comment">// 确保在同一局域网下</span></span><br><span class="line">                    ToastUtils.showLong(<span class="string">&quot;请检查打印服务器IP和端口连接&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            connect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 连接websocket</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LogUtils.i(<span class="string">&quot;connect&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// connectBlocking多出一个等待操作，会先连接再发送，否则未连接发送会报错</span></span><br><span class="line">                    mWebSocketClient.connectBlocking();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 断开websocket连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeConnect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        LogUtils.i(<span class="string">&quot;closeConnect&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> != mWebSocketClient) &#123;</span><br><span class="line">                mWebSocketClient.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mWebSocketClient = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送消息给服务端</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Object msg)</span> </span>&#123;</span><br><span class="line">        LogUtils.i(<span class="string">&quot;sendMessage&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (mWebSocketClient != <span class="keyword">null</span> &amp;&amp; mWebSocketClient.isOpen()) &#123;</span><br><span class="line">            String jsonStr = GsonUtils.toJson(msg);</span><br><span class="line">            mWebSocketClient.send(jsonStr);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ToastUtils.showShort(<span class="string">&quot;未开启websocket连接&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用，在基类BaseActivity</span></span><br><span class="line"><span class="keyword">protected</span> WebSocketHelper mWebSocketHelper = WebSocketHelper.getInstance();</span><br><span class="line"><span class="comment">// onCreate</span></span><br><span class="line"><span class="keyword">if</span> (needWebSocket()) &#123;</span><br><span class="line">    <span class="comment">// 连接服务器，websocket通信，&quot;ws://127.0.0.1:10000&quot;</span></span><br><span class="line">    mWebSocketHelper.initSockect(address);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// onDestory</span></span><br><span class="line">mWebSocketHelper.closeConnect();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认所有页不启用websocket连接</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">needWebSocket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在子类，发消息</span></span><br><span class="line">mWebSocketHelper.sendMessage(msg);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">needWebSocket</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考：<br><a href="https://www.jianshu.com/p/7b919910c892">https://www.jianshu.com/p/7b919910c892</a><br><a href="https://github.com/yangxch/WebSocketClient">https://github.com/yangxch/WebSocketClient</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Android App定制化开发实现</title>
    <url>/2020/05/22/20200522_Android%20App%E5%AE%9A%E5%88%B6%E5%8C%96%E5%BC%80%E5%8F%91%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h4 id="方法一，通过gradle构建生成BuildConfig-java静态变量"><a href="#方法一，通过gradle构建生成BuildConfig-java静态变量" class="headerlink" title="方法一，通过gradle构建生成BuildConfig.java静态变量"></a>方法一，通过gradle构建生成BuildConfig.java静态变量</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在build.gradle里配置defaultConfig</span></span><br><span class="line">defaultConfig &#123;</span><br><span class="line">    buildConfigField <span class="string">&quot;boolean&quot;</span>, <span class="string">&quot;IS_DEBUG&quot;</span>, <span class="string">&quot;true&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line">buildTypes &#123;</span><br><span class="line">    debug &#123;</span><br><span class="line">        buildConfigField <span class="string">&quot;boolean&quot;</span>, <span class="string">&quot;IS_DEBUG&quot;</span>, <span class="string">&quot;true&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    releas &#123;</span><br><span class="line">        buildConfigField <span class="string">&quot;boolean&quot;</span>, <span class="string">&quot;IS_DEBUG&quot;</span>, <span class="string">&quot;true&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过BuildConfig.isDebug拿到值，如果是组件化则通过反射拿到BuildConfig.java里的值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBuildConfigValue</span><span class="params">(Context context, String key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(context.getPackageName() + <span class="string">&quot;.BuildConfig&quot;</span>);</span><br><span class="line">        Field field = clazz.getField(key);</span><br><span class="line">        <span class="keyword">return</span> field.get(clazz);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">------------------</span><br><span class="line"></span><br><span class="line"><span class="comment">// BuildConfig.java文件如下</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">BuildConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> IS_DEBUG = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="方法二，通过自定义config-properties文件读取"><a href="#方法二，通过自定义config-properties文件读取" class="headerlink" title="方法二，通过自定义config.properties文件读取"></a>方法二，通过自定义config.properties文件读取</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在app moudle的res平级目录新建assets文件夹，放入config.properties文件，如下</span></span><br><span class="line">#<span class="keyword">true</span> 是debug模式，<span class="keyword">else</span> 不是</span><br><span class="line">IS_DEBUG=<span class="keyword">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在BaseApplication拿到properties的值</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isDebug;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    InputStream in = <span class="keyword">null</span>;</span><br><span class="line">    property = <span class="keyword">new</span> Properties();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        in = getResources().getAssets().open(<span class="string">&quot;config.properties&quot;</span>);</span><br><span class="line">        property.load(in);</span><br><span class="line">        isDebug = Boolean.parseBoolean(property.getProperty(<span class="string">&quot;IS_DEBUG&quot;</span>));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        LogUtils.e(<span class="string">&quot;load properties error&quot;</span> + e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (in != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                in.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>UML类图和时序图</title>
    <url>/2020/07/03/20200703_UML%E7%B1%BB%E5%9B%BE%E5%92%8C%E6%97%B6%E5%BA%8F%E5%9B%BE/</url>
    <content><![CDATA[<img src="/images/20200703_UML类图.png" class="nofancybox"/>


<blockquote>
<p>参考：<a href="https://blog.csdn.net/YuanMxy/article/details/81211594">https://blog.csdn.net/YuanMxy/article/details/81211594</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>装机</title>
    <url>/2020/04/11/20200411_%E8%A3%85%E6%9C%BA/</url>
    <content><![CDATA[<h3 id="装机方式"><a href="#装机方式" class="headerlink" title="装机方式"></a>装机方式</h3><ul>
<li>微PE工具箱</li>
<li>用UltraISO刻录操作系统到U盘</li>
</ul>
<h3 id="BIOS的设置（ThinkPad为例，E、T、X系列）"><a href="#BIOS的设置（ThinkPad为例，E、T、X系列）" class="headerlink" title="BIOS的设置（ThinkPad为例，E、T、X系列）"></a>BIOS的设置（ThinkPad为例，E、T、X系列）</h3><ul>
<li>在Boot Secure中disable掉</li>
<li>修改启动模式<ul>
<li>如果硬盘格式是MBR，BOIS设置启动模式为legacy </li>
<li>如果硬盘格式是GUID(GPT)，BOIS设置启动模式为UEFI</li>
</ul>
</li>
<li>检测是否能装（在PE中加载镜像，运行镜像中的装机程序）</li>
</ul>
<h3 id="分区助手的使用"><a href="#分区助手的使用" class="headerlink" title="分区助手的使用"></a>分区助手的使用</h3><ul>
<li>C盘扩容，务必在PE下进行</li>
<li>一种情况，不在PE下进行C盘扩容，可能存在失败，导致C盘打不开，那么用DiskGenius重建C盘，即可找回文件，但恢复C盘状态尚不明确，只好重装操作系统</li>
</ul>
<h3 id="MBR与GUID-GPT-格式之间的转换"><a href="#MBR与GUID-GPT-格式之间的转换" class="headerlink" title="MBR与GUID(GPT)格式之间的转换"></a>MBR与GUID(GPT)格式之间的转换</h3><ul>
<li>用DiskGenius转换盘符，如C盘（无损，不需要清空硬盘数据）</li>
</ul>
<h3 id="系统的下载"><a href="#系统的下载" class="headerlink" title="系统的下载"></a>系统的下载</h3><ul>
<li>MSDN I tell you，下载最最新的OS<blockquote>
<p>存在的情况，E485电脑是AMD 2500u，如果用cn_windows_10_ultimate_x86_dvd.iso会导致非常频繁的死机、蓝屏，如果用最新的cn_windows_10_consumer_editions_version_1909_updated_jan_2020_x64_dvd_47161f17.iso则不会死机、蓝屏</p>
</blockquote>
</li>
</ul>
<h3 id="驱动安装"><a href="#驱动安装" class="headerlink" title="驱动安装"></a>驱动安装</h3><ul>
<li>下载鲁大师（里面基于360驱动助手）</li>
<li>或下载360驱动助手万能网卡版</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>禁用Android输入法</title>
    <url>/2020/10/25/20201025_%E7%A6%81%E7%94%A8android%E8%BE%93%E5%85%A5%E6%B3%95/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyboardUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">KeyboardUtils</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启用软键盘</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">enableKeyboard</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        activity.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 禁用软键盘</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">disableKeyboard</span><span class="params">(Activity activity)</span></span>&#123;</span><br><span class="line">        activity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIP_HIDE_FORCED = <span class="number">242</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIP_RESET_HIDE_FORCED = <span class="number">243</span>;</span><br><span class="line"></span><br><span class="line">InputMethodManager inputMethodManager = (InputMethodManager) context.getSystemService(<span class="string">&quot;input_method&quot;</span>);</span><br><span class="line">inputMethodManager.hideSoftInputFromWindow(<span class="keyword">null</span>, SIP_HIDE_FORCED);</span><br><span class="line">inputMethodManager.hideSoftInputFromWindow(<span class="keyword">null</span>, SIP_RESET_HIDE_FORCED);</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>RxJava全局异常处理</title>
    <url>/2020/10/29/20201027_RxJava%E5%85%A8%E5%B1%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RxJava事件通过.subscribe进行订阅，在subscribe方法中，最终传到LambdaObserver类中</span><br><span class="line">LambdaObserver&lt;T&gt; ls = <span class="keyword">new</span> LambdaObserver&lt;T&gt;(onNext, onError, onComplete, onSubscribe);</span><br><span class="line"></span><br><span class="line">在LambdaObserver中，所有的事件都进行了<span class="keyword">try</span>...<span class="keyword">catch</span>，最终oNext抛出的异常都流转到onError方法中，若onError抛出异常则最终流转到RxJavaPlugins.onError中处理;即在在BaseApplication.java中进行异常处理。</span><br><span class="line">其中，当在onError中抛出异常，则走到RxJavaPlugins.onError(<span class="keyword">new</span> CompositeException(t, e));这里会进行遍历打印所有的异常，属于异常中的异常，即抛出CompositeException</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isDisposed()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                onNext.accept(t);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                Exceptions.throwIfFatal(e);</span><br><span class="line">                get().dispose();</span><br><span class="line">                onError(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!isDisposed()) &#123;</span><br><span class="line">            lazySet(DisposableHelper.DISPOSED);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                onError.accept(t);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                Exceptions.throwIfFatal(e);</span><br><span class="line">                RxJavaPlugins.onError(<span class="keyword">new</span> CompositeException(t, e));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            RxJavaPlugins.onError(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">在BaseApplication.java中进行全局异常处理</span><br><span class="line"> RxJavaPlugins.setErrorHandler(throwable -&gt; &#123;</span><br><span class="line">            StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;全局异常，所有CompositeException异常:&quot;</span>);</span><br><span class="line">            LogUtils.e(<span class="string">&quot;全局异常：setErrorHandler ---&gt; throwable name: &quot;</span> + throwable.getClass().getName());</span><br><span class="line">            <span class="keyword">if</span> (throwable <span class="keyword">instanceof</span> CompositeException) &#123;</span><br><span class="line">                List&lt;Throwable&gt; exceptions = ((CompositeException)throwable).getExceptions();</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (Throwable exception : exceptions) &#123;</span><br><span class="line">                    stringBuffer.append(<span class="string">&quot; &quot;</span>).append(i++).append(<span class="string">&quot;、&quot;</span>).append(exception.getClass().getName());</span><br><span class="line">                    <span class="keyword">if</span> (!(exception <span class="keyword">instanceof</span> ParseException)) &#123;</span><br><span class="line">                        LogUtils.e(exception);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 打印所有CompositeException异常</span></span><br><span class="line">                LogUtils.e(stringBuffer);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                LogUtils.e(throwable);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 代码问题，非业务逻辑异常</span></span><br><span class="line">            ToastUtils.showShort(<span class="string">&quot;Non-business logic exception&quot;</span>);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Android模拟点击事件脚本</title>
    <url>/2020/10/29/20201029_Android%E6%A8%A1%E6%8B%9F%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<h2 id="模拟操作修改wifi代理，便于切换代理fiddler抓包"><a href="#模拟操作修改wifi代理，便于切换代理fiddler抓包" class="headerlink" title="模拟操作修改wifi代理，便于切换代理fiddler抓包"></a>模拟操作修改wifi代理，便于切换代理fiddler抓包</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回主界面</span></span><br><span class="line">adb shell input keyevent <span class="number">3</span></span><br><span class="line"><span class="comment">// 打开WiFi设置界面</span></span><br><span class="line">adb shell am start -a android.intent.action.MAIN -n com.android.settings/.wifi.WifiSettings</span><br><span class="line"></span><br><span class="line"><span class="comment">// 长按</span></span><br><span class="line">adb shell input swipe startX startY startX startY <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 滑动解锁</span></span><br><span class="line">adb shell input swipe <span class="number">300</span> <span class="number">1000</span> <span class="number">300</span> <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 长按，两个坐标一样，长按时间ms</span></span><br><span class="line">adb shell input swipe <span class="number">300</span> <span class="number">260</span> <span class="number">300</span> <span class="number">260</span> <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟鼠标点击操作</span></span><br><span class="line">adb shell input mouse tap <span class="number">300</span> <span class="number">440</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 长按全选</span></span><br><span class="line">adb shell input swipe <span class="number">300</span> <span class="number">260</span> <span class="number">300</span> <span class="number">260</span> <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全选删除</span></span><br><span class="line">adb shell input keyevent <span class="number">67</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入字符 192.168.43.231</span></span><br><span class="line">adb shell input text <span class="number">192.168</span><span class="number">.43</span><span class="number">.231</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 向上滑</span></span><br><span class="line">adb shell input touchscreen swipe <span class="number">300</span> <span class="number">188</span> <span class="number">300</span> <span class="number">38</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟鼠标点击操作 --》 点击端口</span></span><br><span class="line">adb shell input mouse tap <span class="number">300</span> <span class="number">210</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 长按全选</span></span><br><span class="line">adb shell input swipe <span class="number">300</span> <span class="number">210</span> <span class="number">300</span> <span class="number">210</span> <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全选删除</span></span><br><span class="line">adb shell input keyevent <span class="number">67</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入字符 192.168.43.231</span></span><br><span class="line">adb shell input text <span class="number">8888</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击保存</span></span><br><span class="line">adb shell input mouse tap <span class="number">280</span> <span class="number">425</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 其它</span></span><br><span class="line">开启飞行模式：<span class="function">adb shell settings put global <span class="title">airplane_mode_on</span> <span class="params">(<span class="number">0</span>==关闭，<span class="number">1</span>==开启)</span></span></span><br><span class="line"><span class="function">清除应用数据与缓存: adb shell pm clear cn.com.test.mobile</span></span><br><span class="line"><span class="function">启动应用: adb shell am start -n cn.com.test.mobile/.ui.SplashActivity </span></span><br><span class="line"><span class="function">停止应用：adb shell am force-stop cn.com.test.mobile</span></span><br><span class="line"><span class="function">获取系统默认输入法：adb shell settings get secure default_input_method</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>AndroidStudio自定义模板MVP templates制作</title>
    <url>/2020/11/04/20201104_AndroidStudio%20MVP%E6%A8%A1%E6%9D%BF%E5%88%B6%E4%BD%9C/</url>
    <content><![CDATA[<p>放入AS模板路径下： plugins\android\lib\templates\activities </p>
<blockquote>
<p>github 地址：<br><a href="https://github.com/chenyinchao/MVP-templates">https://github.com/chenyinchao/MVP-templates</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Rxhttp请求log打印，及异常分类处理</title>
    <url>/2020/10/29/20201027_Rxhttp%E8%AF%B7%E6%B1%82log%E6%89%93%E5%8D%B0%EF%BC%8C%E5%8F%8A%E5%BC%82%E5%B8%B8%E5%88%86%E7%B1%BB%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h3 id="给-Okhttp-添加拦截器，LoggingInterceptor"><a href="#给-Okhttp-添加拦截器，LoggingInterceptor" class="headerlink" title="给 Okhttp 添加拦截器，LoggingInterceptor"></a>给 Okhttp 添加拦截器，LoggingInterceptor</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">在BaseApplication中，我们初始化Okhttp增加一个LoggingInterceptor拦截器，专门处理每个请求</span><br><span class="line"><span class="keyword">new</span> OkHttpClient.Builder().addInterceptor(<span class="keyword">new</span> LoggingInterceptor())</span><br><span class="line"></span><br><span class="line">LoggingInterceptor.java类，打印响应时间，header，body，url，请求方式等一切response数据，输出到本地log日志中保存</span><br><span class="line"><span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(<span class="meta">@NotNull</span> Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 请求发起的时间</span></span><br><span class="line">        <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">        <span class="comment">// 这个chain里面包含了request和response，所以你要什么都可以从这里拿</span></span><br><span class="line">        Request request = chain.request();</span><br><span class="line">        Response response = chain.proceed(request);</span><br><span class="line">        <span class="comment">// 收到响应的时间</span></span><br><span class="line">        <span class="keyword">long</span> t2 = System.nanoTime();</span><br><span class="line">        <span class="comment">// 当前时间</span></span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;HH:mm:ss:SSS&quot;</span>, Locale.getDefault());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String result = getResult(response.body(), isOnResultDecoder(response));</span><br><span class="line">            StringBuilder builder =</span><br><span class="line">                <span class="keyword">new</span> StringBuilder().append(<span class="string">&quot;\n\n&quot;</span>).append(<span class="string">&quot;\n&quot;</span> + dateFormat.format(calendar.getTime()) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">                    .append(String.format(<span class="string">&quot;====== start 响应时间：%.1fms &quot;</span>, (t2 - t1) / <span class="number">1e6d</span>)).append(<span class="string">&quot;Method=&quot;</span>)</span><br><span class="line">                    .append(request.method()).append(<span class="string">&quot; Code=&quot;</span>).append(response.code()).append(<span class="string">&quot; =======&gt;&quot;</span> + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">                    .append(getEncodedUrlAndParams(request)).append(<span class="string">&quot;\n&quot;</span>).append(response.headers()).append(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">                    .append(result).append(<span class="string">&quot;\n&quot;</span> + <span class="string">&quot;&lt;===== end ============================================&quot;</span> + <span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">            LogUtils.i(builder.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            LogUtils.e(<span class="string">&quot;Request end Log printing failed&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="处理请求回调异常"><a href="#处理请求回调异常" class="headerlink" title="处理请求回调异常"></a>处理请求回调异常</h3><p>ObservableLife 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Disposable <span class="title">subscribe</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; onNext, Consumer&lt;? <span class="keyword">super</span> Throwable&gt; onError)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> subscribe(onNext, onError, Functions.EMPTY_ACTION, Functions.emptyConsumer());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>LambdaObserver 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (!isDisposed()) &#123;</span><br><span class="line">           lazySet(DisposableHelper.DISPOSED);</span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               onError.accept(t);</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">               Exceptions.throwIfFatal(e);</span><br><span class="line">               RxJavaPlugins.onError(<span class="keyword">new</span> CompositeException(t, e));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           RxJavaPlugins.onError(t);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>扩展 subscribe 方法里的 onError 接口，当出现异常时，会调用默认的 accept 方法，当 accept 方法里面处理不了，则抛出 异常到 throw (Exception)throwable; 即在全局异常中捕获</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnError</span> <span class="keyword">extends</span> <span class="title">Consumer</span>&lt;<span class="title">Throwable</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 网络接口异常</span></span><br><span class="line">        LogUtils.i(<span class="string">&quot;throwable name: &quot;</span> + throwable.getClass().getName());</span><br><span class="line">        <span class="keyword">if</span> (throwable <span class="keyword">instanceof</span> SocketException || throwable <span class="keyword">instanceof</span> InterruptedIOException) &#123;</span><br><span class="line">            ToastUtils.showShort(<span class="string">&quot;请检查网络或服务器连接！&quot;</span>);</span><br><span class="line">            <span class="comment">// 后端接口请求异常，Http 状态码 小于200或者大于等于300时,或者ResponseBody等于null，抛出此异常</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (throwable <span class="keyword">instanceof</span> HttpStatusCodeException) &#123;</span><br><span class="line">            String statusCode = ((HttpStatusCodeException)throwable).getStatusCode();</span><br><span class="line">            <span class="keyword">switch</span> (statusCode) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;403&quot;</span>:</span><br><span class="line">                    <span class="comment">// token 过期</span></span><br><span class="line">                    ToastUtils.showShort(<span class="string">&quot;403 Forbidden 请重新登录!&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    ToastUtils.showShort(<span class="string">&quot;接口网络请求异常，statusCode： &quot;</span> + statusCode);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (throwable <span class="keyword">instanceof</span> ParseException) &#123;</span><br><span class="line">            String requestResult = ((ParseException)throwable).getRequestResult();</span><br><span class="line">            <span class="keyword">switch</span> (requestResult) &#123;</span><br><span class="line">                <span class="comment">// 0，result返回null</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;0&quot;</span>:</span><br><span class="line">                    ToastUtils.showShort(<span class="string">&quot;数据解析不正确，Gson解析失败&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 1，isSuccess返回false</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;1&quot;</span>:</span><br><span class="line">                    <span class="comment">// todo 内部错误场景</span></span><br><span class="line">                    onError(throwable);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 2，data字段为null</span></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;2&quot;</span>:</span><br><span class="line">                    ToastUtils.showShort(<span class="string">&quot;接口返回data为null&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (throwable <span class="keyword">instanceof</span> Exception) &#123;</span><br><span class="line">                <span class="comment">// 在全局异常中捕获</span></span><br><span class="line">                <span class="keyword">throw</span> (Exception)throwable;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异常接口回调</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Chrome Stylus对CSDN的样式修改</title>
    <url>/2020/11/04/20201104_Chrome%20Stylus%E5%AF%B9CSDN%E7%9A%84%E6%A0%B7%E5%BC%8F%E4%BF%AE%E6%94%B9/</url>
    <content><![CDATA[<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#csdn-toolbar</span>,</span><br><span class="line"><span class="selector-class">.article-info-box</span>,</span><br><span class="line"><span class="selector-class">.hide-article-box</span>,</span><br><span class="line"><span class="selector-class">.blog-expert-recommend-box</span>,</span><br><span class="line"><span class="selector-class">.recommend-item-box</span><span class="selector-class">.type_hot_word</span>,</span><br><span class="line"><span class="selector-class">.recommend-ad-box</span>,</span><br><span class="line"><span class="selector-class">.isGreatIcon</span>,</span><br><span class="line"><span class="selector-class">.tool-box</span>,</span><br><span class="line"><span class="selector-class">.meau-gotop-box</span>,</span><br><span class="line"><span class="selector-class">.more-toolbox</span>,</span><br><span class="line"><span class="selector-class">.recommend-end-box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: source-han-serif-tc, -apple-system, BlinkMacSystemFont, <span class="string">&quot;Segoe UI&quot;</span>,</span><br><span class="line">    Roboto, Oxygen, Ubuntu, Cantarell, <span class="string">&quot;Fira Sans&quot;</span>, <span class="string">&quot;Droid Sans&quot;</span>, <span class="string">&quot;Helvetica Neue&quot;</span>,</span><br><span class="line">    sans-serif <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">min-width</span>: unset;</span><br><span class="line">  <span class="attribute">background</span>: none <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">0.8</span>) <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#article_content</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: auto <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#mainBox</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: auto;</span><br><span class="line">  <span class="attribute">margin-right</span>: auto;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">60%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#mainBox</span> &gt; <span class="selector-tag">main</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">float</span>: none;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#mainBox</span> &gt; <span class="selector-tag">aside</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: unset <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">float</span>: none;</span><br><span class="line">  <span class="attribute">display</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pulllog-box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.recommend-box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">background</span>: white;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">3rem</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.recommend-box</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;相关文章&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.3rem</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.recommend-item-box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">25rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.recommend-item-box</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.recommend-item-box</span> <span class="selector-class">.content</span>,</span><br><span class="line"><span class="selector-class">.recommend-item-box</span> <span class="selector-tag">h4</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.blog_title_box</span><span class="selector-class">.oneline</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>gradle下载</title>
    <url>/2020/08/15/20200815_gradle%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<ol>
<li><p>新建 gradle.properties 文件，加上 <code>org.gradle.jvmargs=-DsocksProxyHost=127.0.0.1 -DsocksProxyPort=10808</code></p>
</li>
<li><p>如下图设置</p>
<img src="/images/20200815_gradle下载.jpg" class="nofancybox"/></li>
<li><p>Android studio Connection refused: connect<br>因为手动设置过一次代理后 studio 就会在 C 盘里面生成一个代理文件，而后 studio 每次编译都会去读取 C 盘路径的文件，删除 C:\Users\pc.gradle 路径下面的 gradle.properties 文件</p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>开通个人博客</title>
    <url>/2019/10/23/20191023_%E5%BC%80%E9%80%9A%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<p>基于Github Pages + Hexo + NexT theme </p>
<p>备份：<br>    默认当前是hexo分支，当hexo d提交到master分支后，再git提交到hexo分支<br>    <a href="https://www.zhihu.com/question/21193762">https://www.zhihu.com/question/21193762</a> (见下图)</p>
<p><strong>其中hexo分支提交生成工具，master分支提交生成静态页index.html</strong></p>
<blockquote>
<p>参考资料：<br>国内npm阿里镜像：<br><a href="https://npm.taobao.org/">https://npm.taobao.org/</a></p>
<p>hexo-theme-next文档：<br><a href="http://theme-next.iissnan.com/getting-started.html">http://theme-next.iissnan.com/getting-started.html</a></p>
</blockquote>
<img src="/images/20191023_开通个人博客.png" class="nofancybox"/>]]></content>
  </entry>
  <entry>
    <title>Pain is temporary, but quitting lasts forever.</title>
    <url>/2019/11/12/%E7%94%9F%E6%B4%BB%E4%B8%BB%E5%8A%A8%E5%87%BA%E5%87%BB%EF%BC%8C%E8%80%8C%E4%B8%8D%E6%98%AF%E8%A2%AB%E5%8A%A8%E6%94%B9%E5%8F%98/</url>
    <content><![CDATA[<p>年轻人要持续不懈的努力，不要认为自己很聪明，今天搞搞这样，明天搞搞那样，可能青春就荒废了，能力是有限的，扎扎实实认定去做一件事情，可能很成功。</p>
<p align="right">——任正非</p>]]></content>
  </entry>
  <entry>
    <title>【转载】谈读书</title>
    <url>/2019/11/13/20191113_%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%91%E8%B0%88%E8%AF%BB%E4%B9%A6/</url>
    <content><![CDATA[<p>西安交通大学政治学教授陆卫明在一次授课时讲道：</p>
<blockquote>
<p>“实际上，我对你们（他的学生）特别是90后一代青年学生还是有一点看法的，什么看法呢？你们把大量的时间花在电脑手机上，如果是要查某些资料就到网上，百度网或者学术期刊找二手的论文，这是害死人的。如果没有读大量的原始经典名著， 就缺乏功底与魅力，不要说是鉴赏能力，就连辨别能力都没有，这个实际上就会导致人云亦云，以讹传讹，不会思考，也没有思想的局面，这恐怕是以后你们发展的最大瓶颈。”</p>
</blockquote>
<h5 id="手机很好玩，但玩手机不会产生价值，而且在浪费价值"><a href="#手机很好玩，但玩手机不会产生价值，而且在浪费价值" class="headerlink" title="手机很好玩，但玩手机不会产生价值，而且在浪费价值"></a>手机很好玩，但玩手机不会产生价值，而且在浪费价值</h5><p>手机是真的好玩，一玩就能玩一天，抖音也好玩，一点进去就能开心几个小时。手机在很大程度上真的能度过无聊的时光。</p>
<p>但是，总有很多时刻，当屏幕熄灭的一瞬间，内心时不时会闪现一丝空荡荡的感觉，花了那么多的时间在看空间，看朋友圈，刷贴吧，逛微博。最后却什么都没有换来，没有产生任何的价值。</p>
<blockquote>
<p>经济学上有个词叫做<strong>“机会成本”</strong>，意思是为了得到这种东西所放弃的东西。套用在这里，玩手机也是有成本的，为了玩手机，需要放弃我们的时间、机会等一系列隐形的成本。</p>
</blockquote>
<p>打个比方， 本来说好去做一天兼职，然后第二天却起不来床，睡了一上午，点了一份外卖，又玩了一下午的游戏，这里的机会成本是本应该做兼职一天的收入。本来说好要去图书馆学习的，但是却呆在宿舍打了一天游戏，本应该在图书馆学习一天知识的时间的机会成本也同样被浪费掉了。</p>
<h5 id="与其吸收零散碎片化的信息，不如多读书形成系统专业的知识"><a href="#与其吸收零散碎片化的信息，不如多读书形成系统专业的知识" class="headerlink" title="与其吸收零散碎片化的信息，不如多读书形成系统专业的知识"></a>与其吸收零散碎片化的信息，不如多读书形成系统专业的知识</h5><p>当然，很多人说他们能够在手机上也能学到很多东西，例如:每天看新闻能够了解我们的社会，刷微博经常会发现新奇的事物能够丰富眼界，看b站时不时还能学到新的技能，搜百度也能找到很多问题的答案。</p>
<p>但这些，无疑都是碎片化的信息，在《如何阅读一本书》这本书里，谈到<strong>阅读的目标分为两类，一是为获得咨询而读，二是为求得理解而读。</strong>显而易见的是绝大多数人属于第一类，为获得娱乐，资讯，消遣时间而玩手机，而这类信息在本质上都是重复的，简单的，不会因为无法理解而伤脑筋 。这类信息很大程度上能增加我们的资讯，却不能增进我们的理解力；</p>
<p>而读书更趋近于第二类，是系统性，理解性的。我们在读书的时候，更多的是去读我们并不怎么知道的东西，这个东西的水平比阅读的人高上一截，在双方水准不齐之下，这个作者想要表达的东西，能增进阅读者的理解力。而且一本书里面的内容往往是一个领域的知识，具有专业性和系统性，能够帮助我们更为深入的了解在该领域的必要知识，在阅读的过程中慢慢理解和思考，可在与作者的沟通中学习到作者建立的知识体系，也能形成自己的认知和思考。</p>
<p>读书这件事可以去辩证的看待，它既有主观的因素，例如读书的意识、方法、态度，动机；也有客观的因素，生活的环境，读书环境，身边人的影响等等。</p>
<p>当然，<strong>我们不能只注重主观的因素，两耳不闻窗外事，一心只读圣贤书的方法只会陷入死读书的怪圈；同样也不能只注重客观因素，例如没有良好的学习环境，身边的人都在玩，离不开手机这些原因就认为没那个条件而不去读书。</strong></p>
<p><strong>这也正如矛盾的普遍性和特殊性关系一般，普遍性在于我们所有人都在读书，特殊性在于每个人都有不同的读书方法和经历，都会有自己独特的感受。</strong></p>
<p><strong>一定要去读书而发现读书的感受，又通过对读书的深刻感受认识去更好的读书。</strong></p>
<hr>
<h4 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h4><p><strong>在琐碎时间玩一会手机是消遣时间，在正经时间玩手机是消遣生命。</strong></p>
<p>读书是一个渐进式的过程<br>从不喜欢读书到喜欢读书的过程并不是一蹴而就的，而是一个漫长的、渐进的、启发的过程，这个过程一定要坚持，每天去图书馆读书不再是坚持，而是一种习惯。我不反对玩手机，我平常也喜欢玩手机。我反对的是每天把大把用于学习，用于活动，用于提升自己的时间拿去玩手机，正如一天精力最好的白天和下午，很多人把这段最好的时间和精力献给了手机。与其吸收零散碎片化的信息，不如多读书形成系统专业的知识。</p>
<p><strong>1、关于为何要系统的学习经典</strong></p>
<ul>
<li><p>为什么要阅读经典？<br>经典之所以是经典，很大程度就在于其深邃、博大，特别是有些内容的学术性、专业性很强，加上历史年代久远，需要一定的背景知识，初次接触，很多人不一定都能读得懂。这就需要我们知难而进，需要坚韧不拔。正因为难，才需要读；难点攻克了，理论素养、思维层次也就上去了。</p>
</li>
<li><p>为什么要系统的学习理论经典？<br>要获得某一理论的精神实质不能只靠抓住只言片语，而要全面地把握理论创始人的完整的理论语境。所以，经典作家的具体的某一篇文章、某一个讲话、某一段语录，一般都有特定的背景和针对性，因而有其理论的侧重点，有其忽略理论的方面，甚至有不同的提法。从只言片语去学习理论，往往会断章取义，不得要领。</p>
</li>
</ul>
<p><strong>2、针对很多人说手机对学习的作用也很大这一说法</strong></p>
<ul>
<li>首先，我赞同这一说法，我在上面用的是“玩”这个语境，并非说的使用手机这个语境。手机是一个工具，如何利用手机的快捷性，取决于我们自己。其次，关于使用手机学习，手机学习的方式可以是，看视频学习、查询资料、看论文、记单词等辅助性的学习方式，合理的运用手机进行学习能够提升学习效率，最后，想要真正的学习经典理论名著，还是要落实到书本上面，通过思考在书本中构建自己的理论知识，手机是辅助性的条件，并非决定性的条件，因此，必须从书本上学习和阅读书籍，辅之以手机促进理解和记忆，会相对容易的学习理论。</li>
</ul>
<blockquote>
<p>作者：魏华懋<br>链接：<br><a href="https://www.zhihu.com/question/303137880/answer/591763203">https://www.zhihu.com/question/303137880/answer/591763203</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>Python搭建Http-Server局域网服务器</title>
    <url>/2019/11/13/20191113_%E6%90%AD%E5%BB%BApython%20http-server%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<p>项目地址：<br><a href="https://github.com/http-party/http-server">https://github.com/http-party/http-server</a></p>
<p>指定目录键入命令：<code>http-server -c-1</code> 就可以把本地目录文件共享出来。//只输入<code>http-server</code>的话，更新了代码后，页面不会同步更新</p>
<p>访问服务器无效，解决办法：<code>npm i http-server@0.9.0 -g</code> //回退到0.9.0版本</p>
<p>参考链接：<br><a href="http://www.imooc.com/wenda/detail/561230">http://www.imooc.com/wenda/detail/561230</a><br>Github上issues：<br><a href="https://github.com/http-party/http-server/issues/525">https://github.com/http-party/http-server/issues/525</a></p>
<blockquote>
<p>搭建Http-Server 是一个简单的零配置的命令行 http服务器，它足够强大便于生产和使用，用于本地测试和开发，手机访问电脑共享。<br>很多时候需要局域网共享文件，有些大文件也没法用微信/qq传，或者是从服务器上需要下载文件到本地scp会很慢，如果用python -m SimpleHTTPServer 会发现服务器性能很差，且不支持并发下载。这时就可以用http-server。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>intellij插件开发，一键遍历，一键提取，一键翻译，一键生成，一键搞定</title>
    <url>/2020/09/18/20200918_intellij%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//返回此项目下的所有子文件</span></span><br><span class="line">VirtualFile[] children = project.getBaseDir().getChildren();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(VirtualFile[] children)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (VirtualFile child : children) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!child.getName().equals(<span class="string">&quot;文件夹名&quot;</span>)) &#123;</span><br><span class="line">                <span class="comment">// 1. 递归找java名称的文件夹</span></span><br><span class="line">                handle(child.getChildren());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 2. 找到了java名称的文件夹，再次递归</span></span><br><span class="line">                handle2(child.getChildren());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">handle2</span><span class="params">(VirtualFile[] children)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (VirtualFile child : children) &#123;</span><br><span class="line">            <span class="keyword">if</span> (child.getName().endsWith(<span class="string">&quot;.java&quot;</span>)) &#123;</span><br><span class="line">                layoutName = child.getName();</span><br><span class="line">                System.out.println(<span class="string">&quot;第&quot;</span> + cout++ + <span class="string">&quot;个：&quot;</span> + layoutName);</span><br><span class="line">                <span class="comment">// 处理所有的.java文件</span></span><br><span class="line">                handLayout(layoutName);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                handle2(child.getChildren());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遍历当前文件找到字符串</span></span><br><span class="line">StringReader inReader = <span class="keyword">new</span> StringReader(file.getText());</span><br><span class="line">BufferedReader bufReader = <span class="keyword">new</span> BufferedReader(inReader);</span><br><span class="line">String packageName = <span class="string">&quot;&quot;</span>;</span><br><span class="line">String lineText;</span><br><span class="line"><span class="keyword">while</span> ((lineText = bufReader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取包名，以包名作为key的命名规则，package com.ycc.abnormalcall.activity;</span></span><br><span class="line">    String pg = <span class="string">&quot;package com.ycc.&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (lineText.contains(pg)) &#123;</span><br><span class="line">        <span class="comment">// abnormalcall.activity;</span></span><br><span class="line">        String substring = lineText.substring(pg.length());</span><br><span class="line">        <span class="keyword">if</span> (substring.endsWith(<span class="string">&quot;;&quot;</span>)) &#123;</span><br><span class="line">            substring = substring.replace(<span class="string">&quot;;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        String[] split = substring.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">        <span class="comment">// abnormalcall</span></span><br><span class="line">        packageName = split[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 匹配括弧里面的中英文 (&quot;&quot;)</span></span><br><span class="line">    String reg = <span class="string">&quot;\\(\\\&quot;.*[\\u4e00-\\u9fa5]+.*\\\&quot;\\)&quot;</span>;</span><br><span class="line">    Matcher matcher = Pattern.compile(reg).matcher(lineText);</span><br><span class="line">    <span class="keyword">if</span> (matcher.find()) &#123;</span><br><span class="line">        <span class="comment">//(&quot;异常呼入&quot;)</span></span><br><span class="line">        <span class="comment">//(&quot;容器号LPN不能为空&quot;)</span></span><br><span class="line">        String group = matcher.group(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 匹配 ---》 取出双引号的内容</span></span><br><span class="line">        String p = <span class="string">&quot;\&quot;([^\&quot;]*)\&quot;&quot;</span>;</span><br><span class="line">        Matcher m1 = Pattern.compile(p).matcher(group);</span><br><span class="line">        <span class="keyword">if</span> (m1.find()) &#123;</span><br><span class="line">            String group1 = m1.group(<span class="number">0</span>);</span><br><span class="line">            <span class="comment">// $1, 取出正则表达式第一个括弧内容</span></span><br><span class="line">            String word = group1.replaceAll(p, <span class="string">&quot;$1&quot;</span>);</span><br><span class="line">            <span class="comment">//异常呼入</span></span><br><span class="line">            <span class="comment">//容器号LPN不能为空</span></span><br><span class="line">            System.out.println(word);</span><br><span class="line">            soureces.add(word);</span><br><span class="line">            String key = packageName + <span class="string">&quot;_&quot;</span>;</span><br><span class="line">            dataBeans.add(<span class="keyword">new</span> DataBean(key, word));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        flag = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">bufReader.close();</span><br><span class="line">inReader.close();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 翻译</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">translate</span><span class="params">(PsiFile file, List&lt;String&gt; sources, List&lt;DataBean&gt; dataBeans)</span> </span>&#123;</span><br><span class="line">flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">new</span> GetTranslationTask(project, <span class="string">&quot;翻译中&quot;</span>, sources, result -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dataBeans.size(); i++) &#123;</span><br><span class="line">            DataBean dataBean = dataBeans.get(i);</span><br><span class="line">            String str = dataBean.getKey() + StringUtils.formatStr(result.get(i));</span><br><span class="line">            dataBean.setKey(str);</span><br><span class="line">        &#125;</span><br><span class="line">        handResult(file, dataBeans);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        showDialog(<span class="string">&quot;翻译异常&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).setCancelText(<span class="string">&quot;Translation Has Been Canceled&quot;</span>).queue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 拼接写入字符串的内容</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getShowContent</span><span class="params">(List&lt;DataBean&gt; attributeValues, String stringPath)</span> </span>&#123;</span><br><span class="line">    StringBuilder block = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    block.append(<span class="string">&quot;&lt;!--################ &quot;</span>).append(layoutName).append(<span class="string">&quot; start ################--&gt;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (DataBean dataBean : attributeValues) &#123;</span><br><span class="line">        <span class="comment">// 处理key值</span></span><br><span class="line">        String keyStr = dataBean.getKey();</span><br><span class="line">        <span class="comment">// [\pP+~$`^=|&lt;&gt;～｀＄＾＋＝｜＜＞￥×]	匹配字母或数字或下划线 --&gt; 过滤掉特殊符号 &amp;!</span></span><br><span class="line">        String ss = keyStr.replaceAll(<span class="string">&quot;[\\pP+~$`^=|&lt;&gt;～｀＄＾＋＝｜＜＞￥×]&quot;</span>, <span class="string">&quot;_&quot;</span>);</span><br><span class="line">        <span class="comment">// 是否有重复的key和value</span></span><br><span class="line">        <span class="keyword">if</span> (isRepeat(ss, stringPath)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        block.append(<span class="string">&quot;&lt;string name=\&quot;&quot;</span>);</span><br><span class="line">        block.append(ss);</span><br><span class="line">        block.append(<span class="string">&quot;\&quot;&gt;&quot;</span>);</span><br><span class="line">        <span class="comment">// 处理value值</span></span><br><span class="line">        <span class="keyword">if</span> (stringPath.contains(<span class="string">&quot;values-zh-rCN&quot;</span>)) &#123;</span><br><span class="line">            block.append(dataBean.getValue());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String key = dataBean.getKey();</span><br><span class="line"><span class="comment">//                String str = &quot;layout_&quot;;</span></span><br><span class="line"><span class="comment">//                int startIndex = key.indexOf(str) + str.length();</span></span><br><span class="line"><span class="comment">//                String substring = key.substring(startIndex);</span></span><br><span class="line">            String substring = key.substring(key.indexOf(<span class="string">&quot;_&quot;</span>) + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (substring.contains(<span class="string">&quot;_&quot;</span>)) &#123;</span><br><span class="line">                String[] s = substring.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (String value : s) &#123;</span><br><span class="line">                    block.append(value).append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                block.deleteCharAt(block.length() - <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                block.append(substring);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        block.append(<span class="string">&quot;&lt;/string&gt;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    block.append(<span class="string">&quot;&lt;!--################ &quot;</span>).append(layoutName).append(<span class="string">&quot; end ################--&gt;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> block.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改java代码里面的字符串</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">changeXml</span><span class="params">(PsiFile file, List&lt;DataBean&gt; dataBeans)</span> </span>&#123;</span><br><span class="line">    WriteCommandAction.runWriteCommandAction(project, () -&gt; &#123;</span><br><span class="line">        VirtualFile virtualFile = file.getVirtualFile();</span><br><span class="line">        Document document = FileDocumentManager.getInstance().getDocument(virtualFile);</span><br><span class="line">        <span class="keyword">if</span> (document != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String text = document.getText();</span><br><span class="line">            <span class="keyword">for</span> (DataBean attributeValue : dataBeans) &#123;</span><br><span class="line">                text = text.replace(<span class="string">&quot;\&quot;&quot;</span> + attributeValue.getValue() + <span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;R.string.&quot;</span> + attributeValue.getKey());</span><br><span class="line">            &#125;</span><br><span class="line">            document.setText(text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 往strings.xml中写内容</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeContentXml</span><span class="params">(String stringPath, List&lt;DataBean&gt; dataBeans)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取内容</span></span><br><span class="line">    String content = getShowContent(dataBeans, stringPath);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// String stringPath = project.getBasePath() + &quot;/app/src/main/res/values/strings.xml&quot;;</span></span><br><span class="line">        VirtualFile virtualFile = LocalFileSystem.getInstance().findFileByPath(stringPath);</span><br><span class="line">        <span class="keyword">if</span> (virtualFile != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Runnable runnable = () -&gt; &#123;</span><br><span class="line">                Document document = FileDocumentManager.getInstance().getDocument(virtualFile);</span><br><span class="line">                <span class="keyword">if</span> (document != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> lineCount = document.getLineCount();</span><br><span class="line">                    <span class="keyword">int</span> lineNumber = document.getLineStartOffset(lineCount - <span class="number">1</span>);</span><br><span class="line">                    document.insertString(lineNumber, content);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            WriteCommandAction.runWriteCommandAction(project, runnable);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            showDialog(<span class="string">&quot;strings.xml文件没找到&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Fiddler</title>
    <url>/2021/05/28/20210528_Fiddler%E6%8A%93%E5%8C%85/</url>
    <content><![CDATA[<h1 id="Fiddler的配置"><a href="#Fiddler的配置" class="headerlink" title="Fiddler的配置"></a>Fiddler的配置</h1><p><img src="%5Cimages%5Cfiddler%5C20210528_fiddler_1.jpg"></p>
<ol>
<li><p>在HTTPS选项卡Actions上，选择<code>Trust Root Certificate</code>安装证书</p>
<p><img src="%5Cimages%5Cfiddler%5C20210528_fiddler_2.png"></p>
</li>
<li><p>左下角模式为Captuing，选项栏勾选<code>Stream（流模式和缓冲模式切换，默认是缓冲模式，默认所有的 http 请求数据都返回给fiddler它才会在控制面板展示出来）</code>和<code>Decode（解压请求）</code></p>
</li>
<li><p>在右侧Filters选项卡，按条件使用，如Show only if URL contains填入.m3u8，或Ctrl+F搜索m3u8</p>
</li>
</ol>
<h1 id="系统代理设置"><a href="#系统代理设置" class="headerlink" title="系统代理设置"></a>系统代理设置</h1><p>IE浏览器打开Internet选项，修改<code>局域网设置</code></p>
<ol>
<li>勾选<code>为LAN使用代理服务器</code>，并配置地址为127.0.0.1，端口8888</li>
<li>关闭自动配置，<code>自动检测设置</code>，<code>使用自动配置脚本</code></li>
</ol>
<p>如Chrome使用了SwitchyOmega，修改成<code>系统代理</code></p>
<h1 id="Fiddler的应用"><a href="#Fiddler的应用" class="headerlink" title="Fiddler的应用"></a>Fiddler的应用</h1><h2 id="一、应用使用"><a href="#一、应用使用" class="headerlink" title="一、应用使用"></a>一、应用使用</h2><h3 id="应用代理配置"><a href="#应用代理配置" class="headerlink" title="应用代理配置"></a>应用代理配置</h3><ul>
<li><p>方法一</p>
<ul>
<li>使用浏览器代理，其它不需要修改即可</li>
</ul>
</li>
<li><p>方法二</p>
<ul>
<li>类型：HTTP代理</li>
<li>地址：127.0.0.1</li>
<li>端口：8888</li>
</ul>
</li>
</ul>
<h3 id="N-m3u8DL-CLI-SimpleG下载"><a href="#N-m3u8DL-CLI-SimpleG下载" class="headerlink" title="N_m3u8DL-CLI-SimpleG下载"></a>N_m3u8DL-CLI-SimpleG下载</h3><ol>
<li><p>右键save-》Response-》Response Body到本地文件-》放入M3u8地址</p>
</li>
<li><p>右键copy-》Just Url-》将红框内容粘贴到BASEURL里面<img src="https://pic1.zhimg.com/80/v2-f4eb3c975c942624497eba0f0f5a3ec2_720w.jpg?source=1940ef5c" alt="img"></p>
</li>
<li><p>点击Go</p>
</li>
</ol>
<h3 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h3><p>Q: 如果需要下载多个视频，比较麻烦怎么办？</p>
<p>A: 可以先抓出所有 M3U8 链接，有三种方法批量下载：</p>
<ol>
<li>将 m3u8 链接每行一个存入一个<code>.txt</code> 文件，然后将文件直接拖到 <code>M3U8地址</code>文本框，点击 <code>GO</code> 按钮</li>
<li>将 m3u8 文件存到一个文件夹中，然后将文件夹直接拖到 <code>M3U8地址</code>文本框，点击 <code>GO</code> 按钮</li>
</ol>
<h2 id="二、断点调试"><a href="#二、断点调试" class="headerlink" title="二、断点调试"></a>二、断点调试</h2><p>略…</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p><a href="https://www.zhihu.com/question/376490136/answer/1113194185">https://www.zhihu.com/question/376490136/answer/1113194185</a></p>
<p><a href="https://blog.csdn.net/weixin_39883139/article/details/98853135">https://blog.csdn.net/weixin_39883139/article/details/98853135</a></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>WI-FI调试android手机</title>
    <url>/2019/11/14/20191114_WI-FI%E8%B0%83%E8%AF%95androd/</url>
    <content><![CDATA[<p>方法一：</p>
<ol>
<li><p>使用数据线连接手机和电脑，打开USB调试</p>
</li>
<li><p>输入<code>adb devices</code> ，查看是否连接</p>
</li>
<li><p>获取手机ip地址，<code>adb shell netcfg</code>，或在手机<code>系统-状态信息</code>查看</p>
</li>
<li><p>ping一下手机电脑网络是否联通<code>ping 192.168.1.1</code>，然后输入<code>adb tcpip 8888</code> （设置端口号为8888，默认端口是5555）</p>
</li>
<li><p>输入<code>adb connect 192.168.1.1:8888</code>，即可连接</p>
</li>
<li><p>最后断开手机和电脑的数据线连接，即可wifi调试android手机</p>
</li>
</ol>
<blockquote>
<p>若断开调试，输入<code>adb disconnect</code></p>
</blockquote>
<p>方法二：</p>
<ul>
<li>在AndroidStudio下载plugins插件<code>Android wifi adb</code></li>
<li>ping一下网络是否联通</li>
</ul>
<blockquote>
<p>连接异常：<br>开启adb服务 <code>adb start-server</code><br>关闭adb服务 <code>adb kill-server</code></p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>C++ 基础语法</title>
    <url>/2020/04/17/20200417_C++%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="C-基础入门"><a href="#C-基础入门" class="headerlink" title="C++基础入门"></a>C++基础入门</h1><h2 id="1-C-初识"><a href="#1-C-初识" class="headerlink" title="1 C++初识"></a>1 C++初识</h2><h3 id="1-1-第一个C-程序"><a href="#1-1-第一个C-程序" class="headerlink" title="1.1  第一个C++程序"></a>1.1  第一个C++程序</h3><p>编写一个C++程序总共分为4个步骤</p>
<ul>
<li>创建项目</li>
<li>创建文件</li>
<li>编写代码</li>
<li>运行程序</li>
</ul>
<h4 id="1-1-1-创建项目"><a href="#1-1-1-创建项目" class="headerlink" title="1.1.1 创建项目"></a>1.1.1 创建项目</h4><p>​    Visual Studio是我们用来编写C++程序的主要工具，我们先将它打开</p>
<p><img src="/images/C++%E8%AF%AD%E6%B3%95/assets/1541383178746.png" alt="1541383178746"></p>
<p><img src="/images/C++%E8%AF%AD%E6%B3%95/assets/1541384366413.png" alt="1541384366413"></p>
<h4 id="1-1-2-创建文件"><a href="#1-1-2-创建文件" class="headerlink" title="1.1.2 创建文件"></a>1.1.2 创建文件</h4><p>右键源文件，选择添加-&gt;新建项</p>
<p><img src="/images/C++%E8%AF%AD%E6%B3%95/assets/1541383817248.png" alt="1541383817248"></p>
<p>给C++文件起个名称，然后点击添加即可。</p>
<p><img src="/images/C++%E8%AF%AD%E6%B3%95/assets/1541384140042.png" alt="1541384140042"></p>
<h4 id="1-1-3-编写代码"><a href="#1-1-3-编写代码" class="headerlink" title="1.1.3 编写代码"></a>1.1.3 编写代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;Hello world&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-1-4-运行程序"><a href="#1-1-4-运行程序" class="headerlink" title="1.1.4 运行程序"></a>1.1.4 运行程序</h4><p><img src="/images/C++%E8%AF%AD%E6%B3%95/assets/1541384818688.png" alt="1541384818688"></p>
<h3 id="1-2-注释"><a href="#1-2-注释" class="headerlink" title="1.2 注释"></a>1.2 注释</h3><p><strong>作用</strong>：在代码中加一些说明和解释，方便自己或其他程序员程序员阅读代码</p>
<p><strong>两种格式</strong></p>
<ol>
<li><strong>单行注释</strong>：<code>// 描述信息</code> <ul>
<li>通常放在一行代码的上方，或者一条语句的末尾，==对该行代码说明==</li>
</ul>
</li>
<li><strong>多行注释</strong>： <code>/* 描述信息 */</code><ul>
<li>通常放在一段代码的上方，==对该段代码做整体说明==</li>
</ul>
</li>
</ol>
<blockquote>
<p>提示：编译器在编译代码时，会忽略注释的内容</p>
</blockquote>
<h3 id="1-3-变量"><a href="#1-3-变量" class="headerlink" title="1.3 变量"></a>1.3 变量</h3><p><strong>作用</strong>：给一段指定的内存空间起名，方便操作这段内存</p>
<p><strong>语法</strong>：<code>数据类型 变量名 = 初始值;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//变量的定义</span></span><br><span class="line">	<span class="comment">//语法：数据类型  变量名 = 初始值</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>注意：C++在创建变量时，必须给变量一个初始值，否则会报错</p>
</blockquote>
<h3 id="1-4-常量"><a href="#1-4-常量" class="headerlink" title="1.4  常量"></a>1.4  常量</h3><p><strong>作用</strong>：用于记录程序中不可更改的数据</p>
<p>C++定义常量两种方式</p>
<ol>
<li><strong>#define</strong> 宏常量： <code>#define 常量名 常量值</code><ul>
<li>==通常在文件上方定义==，表示一个常量</li>
</ul>
</li>
</ol>
<ol start="2">
<li><strong>const</strong>修饰的变量 <code>const 数据类型 常量名 = 常量值</code><ul>
<li>==通常在变量定义前加关键字const==，修饰该变量为常量，不可修改</li>
</ul>
</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、宏常量</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> day 7</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;一周里总共有 &quot;</span> &lt;&lt; day &lt;&lt; <span class="string">&quot; 天&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//day = 8;  //报错，宏常量不可以修改</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//2、const修饰变量</span></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> month = <span class="number">12</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;一年里总共有 &quot;</span> &lt;&lt; month &lt;&lt; <span class="string">&quot; 个月份&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//month = 24; //报错，常量是不可以修改的</span></span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>










<h3 id="1-5-关键字"><a href="#1-5-关键字" class="headerlink" title="1.5 关键字"></a>1.5 关键字</h3><p><strong>作用：</strong>关键字是C++中预先保留的单词（标识符）</p>
<ul>
<li><strong>在定义变量或者常量时候，不要用关键字</strong></li>
</ul>
<p>C++关键字如下：</p>
<table>
<thead>
<tr>
<th>asm</th>
<th>do</th>
<th>if</th>
<th>return</th>
<th>typedef</th>
</tr>
</thead>
<tbody><tr>
<td>auto</td>
<td>double</td>
<td>inline</td>
<td>short</td>
<td>typeid</td>
</tr>
<tr>
<td>bool</td>
<td>dynamic_cast</td>
<td>int</td>
<td>signed</td>
<td>typename</td>
</tr>
<tr>
<td>break</td>
<td>else</td>
<td>long</td>
<td>sizeof</td>
<td>union</td>
</tr>
<tr>
<td>case</td>
<td>enum</td>
<td>mutable</td>
<td>static</td>
<td>unsigned</td>
</tr>
<tr>
<td>catch</td>
<td>explicit</td>
<td>namespace</td>
<td>static_cast</td>
<td>using</td>
</tr>
<tr>
<td>char</td>
<td>export</td>
<td>new</td>
<td>struct</td>
<td>virtual</td>
</tr>
<tr>
<td>class</td>
<td>extern</td>
<td>operator</td>
<td>switch</td>
<td>void</td>
</tr>
<tr>
<td>const</td>
<td>false</td>
<td>private</td>
<td>template</td>
<td>volatile</td>
</tr>
<tr>
<td>const_cast</td>
<td>float</td>
<td>protected</td>
<td>this</td>
<td>wchar_t</td>
</tr>
<tr>
<td>continue</td>
<td>for</td>
<td>public</td>
<td>throw</td>
<td>while</td>
</tr>
<tr>
<td>default</td>
<td>friend</td>
<td>register</td>
<td>true</td>
<td></td>
</tr>
<tr>
<td>delete</td>
<td>goto</td>
<td>reinterpret_cast</td>
<td>try</td>
<td></td>
</tr>
</tbody></table>
<p><code>提示：在给变量或者常量起名称时候，不要用C++得关键字，否则会产生歧义。</code></p>
<h3 id="1-6-标识符命名规则"><a href="#1-6-标识符命名规则" class="headerlink" title="1.6 标识符命名规则"></a>1.6 标识符命名规则</h3><p><strong>作用</strong>：C++规定给标识符（变量、常量）命名时，有一套自己的规则</p>
<ul>
<li>标识符不能是关键字</li>
<li>标识符只能由字母、数字、下划线组成</li>
<li>第一个字符必须为字母或下划线</li>
<li>标识符中字母区分大小写</li>
</ul>
<blockquote>
<p>建议：给标识符命名时，争取做到见名知意的效果，方便自己和他人的阅读</p>
</blockquote>
<h2 id="2-数据类型"><a href="#2-数据类型" class="headerlink" title="2 数据类型"></a>2 数据类型</h2><p>C++规定在创建一个变量或者常量时，必须要指定出相应的数据类型，否则无法给变量分配内存</p>
<h3 id="2-1-整型"><a href="#2-1-整型" class="headerlink" title="2.1 整型"></a>2.1 整型</h3><p><strong>作用</strong>：整型变量表示的是==整数类型==的数据</p>
<p>C++中能够表示整型的类型有以下几种方式，<strong>区别在于所占内存空间不同</strong>：</p>
<table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>占用空间</strong></th>
<th>取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>short(短整型)</td>
<td>2字节</td>
<td>(-2^15 ~ 2^15-1)</td>
</tr>
<tr>
<td>int(整型)</td>
<td>4字节</td>
<td>(-2^31 ~ 2^31-1)</td>
</tr>
<tr>
<td>long(长整形)</td>
<td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td>
<td>(-2^31 ~ 2^31-1)</td>
</tr>
<tr>
<td>long long(长长整形)</td>
<td>8字节</td>
<td>(-2^63 ~ 2^63-1)</td>
</tr>
</tbody></table>
<h3 id="2-2-sizeof关键字"><a href="#2-2-sizeof关键字" class="headerlink" title="2.2 sizeof关键字"></a>2.2 sizeof关键字</h3><p><strong>作用：</strong>利用sizeof关键字可以==统计数据类型所占内存大小==</p>
<p><strong>语法：</strong> <code>sizeof( 数据类型 / 变量)</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;short 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">short</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;int 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;long 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">long</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;long long 类型所占内存空间为： &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">long</span> <span class="keyword">long</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<blockquote>
<p><strong>整型结论</strong>：==short &lt; int &lt;= long &lt;= long long==</p>
</blockquote>
<h3 id="2-3-实型（浮点型）"><a href="#2-3-实型（浮点型）" class="headerlink" title="2.3 实型（浮点型）"></a>2.3 实型（浮点型）</h3><p><strong>作用</strong>：用于==表示小数==</p>
<p>浮点型变量分为两种：</p>
<ol>
<li>单精度float </li>
<li>双精度double</li>
</ol>
<p>两者的<strong>区别</strong>在于表示的有效数字范围不同。</p>
<table>
<thead>
<tr>
<th><strong>数据类型</strong></th>
<th><strong>占用空间</strong></th>
<th><strong>有效数字范围</strong></th>
</tr>
</thead>
<tbody><tr>
<td>float</td>
<td>4字节</td>
<td>7位有效数字</td>
</tr>
<tr>
<td>double</td>
<td>8字节</td>
<td>15～16位有效数字</td>
</tr>
</tbody></table>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">float</span> f1 = <span class="number">3.14f</span>;</span><br><span class="line">	<span class="keyword">double</span> d1 = <span class="number">3.14</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; f1 &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; d1&lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;float  sizeof = &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(f1) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;double sizeof = &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(d1) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//科学计数法</span></span><br><span class="line">	<span class="keyword">float</span> f2 = <span class="number">3e2</span>; <span class="comment">// 3 * 10 ^ 2 </span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;f2 = &quot;</span> &lt;&lt; f2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">float</span> f3 = <span class="number">3e-2</span>;  <span class="comment">// 3 * 0.1 ^ 2</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;f3 = &quot;</span> &lt;&lt; f3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h3 id="2-4-字符型"><a href="#2-4-字符型" class="headerlink" title="2.4 字符型"></a>2.4 字符型</h3><p><strong>作用：</strong>字符型变量用于显示单个字符</p>
<p><strong>语法：</strong><code>char ch = &#39;a&#39;;</code></p>
<blockquote>
<p>注意1：在显示字符型变量时，用单引号将字符括起来，不要用双引号</p>
</blockquote>
<blockquote>
<p>注意2：单引号内只能有一个字符，不可以是字符串</p>
</blockquote>
<ul>
<li>C和C++中字符型变量只占用==1个字节==。</li>
<li>字符型变量并不是把字符本身放到内存中存储，而是将对应的ASCII编码放入到存储单元</li>
</ul>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">char</span> ch = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">	cout &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//ch = &quot;abcde&quot;; //错误，不可以用双引号</span></span><br><span class="line">	<span class="comment">//ch = &#x27;abcde&#x27;; //错误，单引号内只能引用一个字符</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; (<span class="keyword">int</span>)ch &lt;&lt; endl;  <span class="comment">//查看字符a对应的ASCII码</span></span><br><span class="line">	ch = <span class="number">97</span>; <span class="comment">//可以直接用ASCII给字符型变量赋值</span></span><br><span class="line">	cout &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ASCII码表格：</p>
<table>
<thead>
<tr>
<th><strong>ASCII</strong>值</th>
<th><strong>控制字符</strong></th>
<th><strong>ASCII</strong>值</th>
<th><strong>字符</strong></th>
<th><strong>ASCII</strong>值</th>
<th><strong>字符</strong></th>
<th><strong>ASCII</strong>值</th>
<th><strong>字符</strong></th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>NUT</td>
<td>32</td>
<td>(space)</td>
<td>64</td>
<td>@</td>
<td>96</td>
<td>、</td>
</tr>
<tr>
<td>1</td>
<td>SOH</td>
<td>33</td>
<td>!</td>
<td>65</td>
<td>A</td>
<td>97</td>
<td>a</td>
</tr>
<tr>
<td>2</td>
<td>STX</td>
<td>34</td>
<td>“</td>
<td>66</td>
<td>B</td>
<td>98</td>
<td>b</td>
</tr>
<tr>
<td>3</td>
<td>ETX</td>
<td>35</td>
<td>#</td>
<td>67</td>
<td>C</td>
<td>99</td>
<td>c</td>
</tr>
<tr>
<td>4</td>
<td>EOT</td>
<td>36</td>
<td>$</td>
<td>68</td>
<td>D</td>
<td>100</td>
<td>d</td>
</tr>
<tr>
<td>5</td>
<td>ENQ</td>
<td>37</td>
<td>%</td>
<td>69</td>
<td>E</td>
<td>101</td>
<td>e</td>
</tr>
<tr>
<td>6</td>
<td>ACK</td>
<td>38</td>
<td>&amp;</td>
<td>70</td>
<td>F</td>
<td>102</td>
<td>f</td>
</tr>
<tr>
<td>7</td>
<td>BEL</td>
<td>39</td>
<td>,</td>
<td>71</td>
<td>G</td>
<td>103</td>
<td>g</td>
</tr>
<tr>
<td>8</td>
<td>BS</td>
<td>40</td>
<td>(</td>
<td>72</td>
<td>H</td>
<td>104</td>
<td>h</td>
</tr>
<tr>
<td>9</td>
<td>HT</td>
<td>41</td>
<td>)</td>
<td>73</td>
<td>I</td>
<td>105</td>
<td>i</td>
</tr>
<tr>
<td>10</td>
<td>LF</td>
<td>42</td>
<td>*</td>
<td>74</td>
<td>J</td>
<td>106</td>
<td>j</td>
</tr>
<tr>
<td>11</td>
<td>VT</td>
<td>43</td>
<td>+</td>
<td>75</td>
<td>K</td>
<td>107</td>
<td>k</td>
</tr>
<tr>
<td>12</td>
<td>FF</td>
<td>44</td>
<td>,</td>
<td>76</td>
<td>L</td>
<td>108</td>
<td>l</td>
</tr>
<tr>
<td>13</td>
<td>CR</td>
<td>45</td>
<td>-</td>
<td>77</td>
<td>M</td>
<td>109</td>
<td>m</td>
</tr>
<tr>
<td>14</td>
<td>SO</td>
<td>46</td>
<td>.</td>
<td>78</td>
<td>N</td>
<td>110</td>
<td>n</td>
</tr>
<tr>
<td>15</td>
<td>SI</td>
<td>47</td>
<td>/</td>
<td>79</td>
<td>O</td>
<td>111</td>
<td>o</td>
</tr>
<tr>
<td>16</td>
<td>DLE</td>
<td>48</td>
<td>0</td>
<td>80</td>
<td>P</td>
<td>112</td>
<td>p</td>
</tr>
<tr>
<td>17</td>
<td>DCI</td>
<td>49</td>
<td>1</td>
<td>81</td>
<td>Q</td>
<td>113</td>
<td>q</td>
</tr>
<tr>
<td>18</td>
<td>DC2</td>
<td>50</td>
<td>2</td>
<td>82</td>
<td>R</td>
<td>114</td>
<td>r</td>
</tr>
<tr>
<td>19</td>
<td>DC3</td>
<td>51</td>
<td>3</td>
<td>83</td>
<td>S</td>
<td>115</td>
<td>s</td>
</tr>
<tr>
<td>20</td>
<td>DC4</td>
<td>52</td>
<td>4</td>
<td>84</td>
<td>T</td>
<td>116</td>
<td>t</td>
</tr>
<tr>
<td>21</td>
<td>NAK</td>
<td>53</td>
<td>5</td>
<td>85</td>
<td>U</td>
<td>117</td>
<td>u</td>
</tr>
<tr>
<td>22</td>
<td>SYN</td>
<td>54</td>
<td>6</td>
<td>86</td>
<td>V</td>
<td>118</td>
<td>v</td>
</tr>
<tr>
<td>23</td>
<td>TB</td>
<td>55</td>
<td>7</td>
<td>87</td>
<td>W</td>
<td>119</td>
<td>w</td>
</tr>
<tr>
<td>24</td>
<td>CAN</td>
<td>56</td>
<td>8</td>
<td>88</td>
<td>X</td>
<td>120</td>
<td>x</td>
</tr>
<tr>
<td>25</td>
<td>EM</td>
<td>57</td>
<td>9</td>
<td>89</td>
<td>Y</td>
<td>121</td>
<td>y</td>
</tr>
<tr>
<td>26</td>
<td>SUB</td>
<td>58</td>
<td>:</td>
<td>90</td>
<td>Z</td>
<td>122</td>
<td>z</td>
</tr>
<tr>
<td>27</td>
<td>ESC</td>
<td>59</td>
<td>;</td>
<td>91</td>
<td>[</td>
<td>123</td>
<td>{</td>
</tr>
<tr>
<td>28</td>
<td>FS</td>
<td>60</td>
<td>&lt;</td>
<td>92</td>
<td>/</td>
<td>124</td>
<td>|</td>
</tr>
<tr>
<td>29</td>
<td>GS</td>
<td>61</td>
<td>=</td>
<td>93</td>
<td>]</td>
<td>125</td>
<td>}</td>
</tr>
<tr>
<td>30</td>
<td>RS</td>
<td>62</td>
<td>&gt;</td>
<td>94</td>
<td>^</td>
<td>126</td>
<td>`</td>
</tr>
<tr>
<td>31</td>
<td>US</td>
<td>63</td>
<td>?</td>
<td>95</td>
<td>_</td>
<td>127</td>
<td>DEL</td>
</tr>
</tbody></table>
<p>ASCII 码大致由以下<strong>两部分组</strong>成：</p>
<ul>
<li>ASCII 非打印控制字符： ASCII 表上的数字 <strong>0-31</strong> 分配给了控制字符，用于控制像打印机等一些外围设备。</li>
<li>ASCII 打印字符：数字 <strong>32-126</strong> 分配给了能在键盘上找到的字符，当查看或打印文档时就会出现。</li>
</ul>
<h3 id="2-5-转义字符"><a href="#2-5-转义字符" class="headerlink" title="2.5 转义字符"></a>2.5 转义字符</h3><p><strong>作用：</strong>用于表示一些==不能显示出来的ASCII字符==</p>
<p>现阶段我们常用的转义字符有：<code> \n  \\  \t</code></p>
<table>
<thead>
<tr>
<th><strong>转义字符</strong></th>
<th><strong>含义</strong></th>
<th><strong>ASCII</strong>码值（十进制）</th>
</tr>
</thead>
<tbody><tr>
<td>\a</td>
<td>警报</td>
<td>007</td>
</tr>
<tr>
<td>\b</td>
<td>退格(BS) ，将当前位置移到前一列</td>
<td>008</td>
</tr>
<tr>
<td>\f</td>
<td>换页(FF)，将当前位置移到下页开头</td>
<td>012</td>
</tr>
<tr>
<td><strong>\n</strong></td>
<td><strong>换行(LF) ，将当前位置移到下一行开头</strong></td>
<td><strong>010</strong></td>
</tr>
<tr>
<td>\r</td>
<td>回车(CR) ，将当前位置移到本行开头</td>
<td>013</td>
</tr>
<tr>
<td><strong>\t</strong></td>
<td><strong>水平制表(HT)  （跳到下一个TAB位置）</strong></td>
<td><strong>009</strong></td>
</tr>
<tr>
<td>\v</td>
<td>垂直制表(VT)</td>
<td>011</td>
</tr>
<tr>
<td>*<em>\\*</em></td>
<td><strong>代表一个反斜线字符”&quot;</strong></td>
<td><strong>092</strong></td>
</tr>
<tr>
<td>&#39;</td>
<td>代表一个单引号（撇号）字符</td>
<td>039</td>
</tr>
<tr>
<td>&quot;</td>
<td>代表一个双引号字符</td>
<td>034</td>
</tr>
<tr>
<td>?</td>
<td>代表一个问号</td>
<td>063</td>
</tr>
<tr>
<td>\0</td>
<td>数字0</td>
<td>000</td>
</tr>
<tr>
<td>\ddd</td>
<td>8进制转义字符，d范围0~7</td>
<td>3位8进制</td>
</tr>
<tr>
<td>\xhh</td>
<td>16进制转义字符，h范围0<del>9，a</del>f，A~F</td>
<td>3位16进制</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\\&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\tHello&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\n&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













<h3 id="2-6-字符串型"><a href="#2-6-字符串型" class="headerlink" title="2.6 字符串型"></a>2.6 字符串型</h3><p><strong>作用</strong>：用于表示一串字符</p>
<p><strong>两种风格</strong></p>
<ol>
<li><p><strong>C风格字符串</strong>： <code>char 变量名[] = &quot;字符串值&quot;</code></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> str1[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">	cout &lt;&lt; str1 &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<blockquote>
<p>注意：C风格的字符串要用双引号括起来</p>
</blockquote>
<ol>
<li><p><strong>C++风格字符串</strong>：  <code>string  变量名 = &quot;字符串值&quot;</code></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	string str = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">	cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ol>
<blockquote>
<p>注意：C++风格字符串，需要加入头文件==#include&lt;string&gt;==</p>
</blockquote>
<h3 id="2-7-布尔类型-bool"><a href="#2-7-布尔类型-bool" class="headerlink" title="2.7 布尔类型 bool"></a>2.7 布尔类型 bool</h3><p><strong>作用：</strong>布尔数据类型代表真或假的值 </p>
<p>bool类型只有两个值：</p>
<ul>
<li>true  — 真（本质是1）</li>
<li>false — 假（本质是0）</li>
</ul>
<p><strong>bool类型占==1个字节==大小</strong></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">	cout &lt;&lt; flag &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	flag = <span class="literal">false</span>;</span><br><span class="line">	cout &lt;&lt; flag &lt;&lt; endl; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;size of bool = &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">bool</span>) &lt;&lt; endl; <span class="comment">//1</span></span><br><span class="line">	</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>















<h3 id="2-8-数据的输入"><a href="#2-8-数据的输入" class="headerlink" title="2.8 数据的输入"></a>2.8 数据的输入</h3><p><strong>作用：用于从键盘获取数据</strong></p>
<p><strong>关键字：</strong>cin</p>
<p><strong>语法：</strong> <code>cin &gt;&gt; 变量 </code></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//整型输入</span></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入整型变量：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cin &gt;&gt; a;</span><br><span class="line">	cout &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//浮点型输入</span></span><br><span class="line">	<span class="keyword">double</span> d = <span class="number">0</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入浮点型变量：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cin &gt;&gt; d;</span><br><span class="line">	cout &lt;&lt; d &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//字符型输入</span></span><br><span class="line">	<span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入字符型变量：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cin &gt;&gt; ch;</span><br><span class="line">	cout &lt;&lt; ch &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//字符串型输入</span></span><br><span class="line">	string str;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入字符串型变量：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cin &gt;&gt; str;</span><br><span class="line">	cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//布尔类型输入</span></span><br><span class="line">	<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入布尔型变量：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cin &gt;&gt; flag;</span><br><span class="line">	cout &lt;&lt; flag &lt;&lt; endl;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> EXIT_SUCCESS;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













<h2 id="3-运算符"><a href="#3-运算符" class="headerlink" title="3 运算符"></a>3 运算符</h2><p><strong>作用：</strong>用于执行代码的运算</p>
<p>本章我们主要讲解以下几类运算符：</p>
<table>
<thead>
<tr>
<th><strong>运算符类型</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td>算术运算符</td>
<td>用于处理四则运算</td>
</tr>
<tr>
<td>赋值运算符</td>
<td>用于将表达式的值赋给变量</td>
</tr>
<tr>
<td>比较运算符</td>
<td>用于表达式的比较，并返回一个真值或假值</td>
</tr>
<tr>
<td>逻辑运算符</td>
<td>用于根据表达式的值返回真值或假值</td>
</tr>
</tbody></table>
<h3 id="3-1-算术运算符"><a href="#3-1-算术运算符" class="headerlink" title="3.1 算术运算符"></a>3.1 算术运算符</h3><p><strong>作用</strong>：用于处理四则运算 </p>
<p>算术运算符包括以下符号：</p>
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>正号</td>
<td>+3</td>
<td>3</td>
</tr>
<tr>
<td>-</td>
<td>负号</td>
<td>-3</td>
<td>-3</td>
</tr>
<tr>
<td>+</td>
<td>加</td>
<td>10 + 5</td>
<td>15</td>
</tr>
<tr>
<td>-</td>
<td>减</td>
<td>10 - 5</td>
<td>5</td>
</tr>
<tr>
<td>*</td>
<td>乘</td>
<td>10 * 5</td>
<td>50</td>
</tr>
<tr>
<td>/</td>
<td>除</td>
<td>10 / 5</td>
<td>2</td>
</tr>
<tr>
<td>%</td>
<td>取模(取余)</td>
<td>10 % 3</td>
<td>1</td>
</tr>
<tr>
<td>++</td>
<td>前置递增</td>
<td>a=2; b=++a;</td>
<td>a=3; b=3;</td>
</tr>
<tr>
<td>++</td>
<td>后置递增</td>
<td>a=2; b=a++;</td>
<td>a=3; b=2;</td>
</tr>
<tr>
<td>–</td>
<td>前置递减</td>
<td>a=2; b=–a;</td>
<td>a=1; b=1;</td>
</tr>
<tr>
<td>–</td>
<td>后置递减</td>
<td>a=2; b=a–;</td>
<td>a=1; b=2;</td>
</tr>
</tbody></table>
<p><strong>示例1：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加减乘除</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a1 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b1 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; a1 + b1 &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; a1 - b1 &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; a1 * b1 &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; a1 / b1 &lt;&lt; endl;  <span class="comment">//两个整数相除结果依然是整数</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a2 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b2 = <span class="number">20</span>;</span><br><span class="line">	cout &lt;&lt; a2 / b2 &lt;&lt; endl; </span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a3 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b3 = <span class="number">0</span>;</span><br><span class="line">	<span class="comment">//cout &lt;&lt; a3 / b3 &lt;&lt; endl; //报错，除数不可以为0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//两个小数可以相除</span></span><br><span class="line">	<span class="keyword">double</span> d1 = <span class="number">0.5</span>;</span><br><span class="line">	<span class="keyword">double</span> d2 = <span class="number">0.25</span>;</span><br><span class="line">	cout &lt;&lt; d1 / d2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：在除法运算中，除数不能为0</p>
</blockquote>
<p><strong>示例2：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取模</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a1 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b1 = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="number">10</span> % <span class="number">3</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a2 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b2 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; a2 % b2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a3 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b3 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//cout &lt;&lt; a3 % b3 &lt;&lt; endl; //取模运算时，除数也不能为0</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//两个小数不可以取模</span></span><br><span class="line">	<span class="keyword">double</span> d1 = <span class="number">3.14</span>;</span><br><span class="line">	<span class="keyword">double</span> d2 = <span class="number">1.1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//cout &lt;&lt; d1 % d2 &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：只有整型变量可以进行取模运算</p>
</blockquote>
<p><strong>示例3：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递增</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//后置递增</span></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	a++; <span class="comment">//等价于a = a + 1</span></span><br><span class="line">	cout &lt;&lt; a &lt;&lt; endl; <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//前置递增</span></span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">	++b;</span><br><span class="line">	cout &lt;&lt; b &lt;&lt; endl; <span class="comment">// 11</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//区别</span></span><br><span class="line">	<span class="comment">//前置递增先对变量进行++，再计算表达式</span></span><br><span class="line">	<span class="keyword">int</span> a2 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b2 = ++a2 * <span class="number">10</span>;</span><br><span class="line">	cout &lt;&lt; b2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//后置递增先计算表达式，后对变量进行++</span></span><br><span class="line">	<span class="keyword">int</span> a3 = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b3 = a3++ * <span class="number">10</span>;</span><br><span class="line">	cout &lt;&lt; b3 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<blockquote>
<p>总结：前置递增先对变量进行++，再计算表达式，后置递增相反</p>
</blockquote>
<h3 id="3-2-赋值运算符"><a href="#3-2-赋值运算符" class="headerlink" title="3.2 赋值运算符"></a>3.2 赋值运算符</h3><p><strong>作用：</strong>用于将表达式的值赋给变量</p>
<p>赋值运算符包括以下几个符号：</p>
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody><tr>
<td>=</td>
<td>赋值</td>
<td>a=2; b=3;</td>
<td>a=2; b=3;</td>
</tr>
<tr>
<td>+=</td>
<td>加等于</td>
<td>a=0; a+=2;</td>
<td>a=2;</td>
</tr>
<tr>
<td>-=</td>
<td>减等于</td>
<td>a=5; a-=3;</td>
<td>a=2;</td>
</tr>
<tr>
<td>*=</td>
<td>乘等于</td>
<td>a=2; a*=2;</td>
<td>a=4;</td>
</tr>
<tr>
<td>/=</td>
<td>除等于</td>
<td>a=4; a/=2;</td>
<td>a=2;</td>
</tr>
<tr>
<td>%=</td>
<td>模等于</td>
<td>a=3; a%2;</td>
<td>a=1;</td>
</tr>
</tbody></table>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//赋值运算符</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// =</span></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	a = <span class="number">100</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// +=</span></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	a += <span class="number">2</span>; <span class="comment">// a = a + 2;</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// -=</span></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	a -= <span class="number">2</span>; <span class="comment">// a = a - 2</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// *=</span></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	a *= <span class="number">2</span>; <span class="comment">// a = a * 2</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// /=</span></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	a /= <span class="number">2</span>;  <span class="comment">// a = a / 2;</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// %=</span></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	a %= <span class="number">2</span>;  <span class="comment">// a = a % 2;</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="3-3-比较运算符"><a href="#3-3-比较运算符" class="headerlink" title="3.3 比较运算符"></a>3.3 比较运算符</h3><p><strong>作用：</strong>用于表达式的比较，并返回一个真值或假值</p>
<p>比较运算符有以下符号：</p>
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody><tr>
<td>==</td>
<td>相等于</td>
<td>4 == 3</td>
<td>0</td>
</tr>
<tr>
<td>!=</td>
<td>不等于</td>
<td>4 != 3</td>
<td>1</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
<td>4 &lt; 3</td>
<td>0</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
<td>4 &gt; 3</td>
<td>1</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于等于</td>
<td>4 &lt;= 3</td>
<td>0</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于等于</td>
<td>4 &gt;= 1</td>
<td>1</td>
</tr>
</tbody></table>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; (a == b) &lt;&lt; endl; <span class="comment">// 0 </span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; (a != b) &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; (a &gt; b) &lt;&lt; endl; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; (a &lt; b) &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; (a &gt;= b) &lt;&lt; endl; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; (a &lt;= b) &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line">	</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>注意：C和C++ 语言的比较运算中， ==“真”用数字“1”来表示， “假”用数字“0”来表示。== </p>
</blockquote>
<h3 id="3-4-逻辑运算符"><a href="#3-4-逻辑运算符" class="headerlink" title="3.4 逻辑运算符"></a>3.4 逻辑运算符</h3><p><strong>作用：</strong>用于根据表达式的值返回真值或假值</p>
<p>逻辑运算符有以下符号：</p>
<table>
<thead>
<tr>
<th><strong>运算符</strong></th>
<th><strong>术语</strong></th>
<th><strong>示例</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody><tr>
<td>!</td>
<td>非</td>
<td>!a</td>
<td>如果a为假，则!a为真；  如果a为真，则!a为假。</td>
</tr>
<tr>
<td>&amp;&amp;</td>
<td>与</td>
<td>a &amp;&amp; b</td>
<td>如果a和b都为真，则结果为真，否则为假。</td>
</tr>
<tr>
<td>||</td>
<td>或</td>
<td>a || b</td>
<td>如果a和b有一个为真，则结果为真，二者都为假时，结果为假。</td>
</tr>
</tbody></table>
<p><strong>示例1：</strong>逻辑非</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逻辑运算符  --- 非</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; !a &lt;&lt; endl; <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; !!a &lt;&lt; endl; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结： 真变假，假变真</p>
</blockquote>
<p><strong>示例2：</strong>逻辑与</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逻辑运算符  --- 与</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;<span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;<span class="comment">// 0 </span></span><br><span class="line"></span><br><span class="line">	a = <span class="number">0</span>;</span><br><span class="line">	b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; (a &amp;&amp; b) &lt;&lt; endl;<span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：逻辑==与==运算符总结： ==同真为真，其余为假==</p>
</blockquote>
<p><strong>示例3：</strong>逻辑或</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//逻辑运算符  --- 或</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; (a || b) &lt;&lt; endl;<span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">	a = <span class="number">10</span>;</span><br><span class="line">	b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; (a || b) &lt;&lt; endl;<span class="comment">// 1 </span></span><br><span class="line"></span><br><span class="line">	a = <span class="number">0</span>;</span><br><span class="line">	b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; (a || b) &lt;&lt; endl;<span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>逻辑==或==运算符总结： ==同假为假，其余为真==</p>
</blockquote>
<h2 id="4-程序流程结构"><a href="#4-程序流程结构" class="headerlink" title="4 程序流程结构"></a>4 程序流程结构</h2><p>C/C++支持最基本的三种程序运行结构：==顺序结构、选择结构、循环结构==</p>
<ul>
<li>顺序结构：程序按顺序执行，不发生跳转</li>
<li>选择结构：依据条件是否满足，有选择的执行相应功能</li>
<li>循环结构：依据条件是否满足，循环多次执行某段代码</li>
</ul>
<h3 id="4-1-选择结构"><a href="#4-1-选择结构" class="headerlink" title="4.1 选择结构"></a>4.1 选择结构</h3><h4 id="4-1-1-if语句"><a href="#4-1-1-if语句" class="headerlink" title="4.1.1 if语句"></a>4.1.1 if语句</h4><p><strong>作用：</strong>执行满足条件的语句</p>
<p>if语句的三种形式</p>
<ul>
<li><p>单行格式if语句</p>
</li>
<li><p>多行格式if语句</p>
</li>
<li><p>多条件的if语句</p>
<p>​</p>
</li>
</ul>
<ol>
<li><p>单行格式if语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;</code></p>
<p><img src="/images/C++%E8%AF%AD%E6%B3%95/assets/clip_image002.png" alt="img"></p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//选择结构-单行if语句</span></span><br><span class="line">	<span class="comment">//输入一个分数，如果分数大于600分，视为考上一本大学，并在屏幕上打印</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入一个分数：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cin &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;您输入的分数为： &quot;</span> &lt;&lt; score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//if语句</span></span><br><span class="line">	<span class="comment">//注意事项，在if判断语句后面，不要加分号</span></span><br><span class="line">	<span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;我考上了一本大学！！！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​</p>
</li>
</ol>
<blockquote>
<p>注意：if条件表达式后不要加分号</p>
</blockquote>
<ol start="2">
<li>多行格式if语句：<code>if(条件)&#123; 条件满足执行的语句 &#125;else&#123; 条件不满足执行的语句 &#125;;</code></li>
</ol>
<p><img src="/images/C++%E8%AF%AD%E6%B3%95/assets/clip_image002-1541662519170.png" alt="img"></p>
<p>​</p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入考试分数：&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cin &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;我考上了一本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;我未考上一本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<ol start="3">
<li>多条件的if语句：<code>if(条件1)&#123; 条件1满足执行的语句 &#125;else if(条件2)&#123;条件2满足执行的语句&#125;... else&#123; 都不满足执行的语句&#125;</code></li>
</ol>
<p><img src="/images/C++%E8%AF%AD%E6%B3%95/assets/clip_image002-1541662566808.png" alt="img"></p>
<p>​</p>
<p>​</p>
<p>​</p>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入考试分数：&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cin &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;我考上了一本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">500</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;我考上了二本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">400</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;我考上了三本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;我未考上本科&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​</p>
<p><strong>嵌套if语句</strong>：在if语句中，可以嵌套使用if语句，达到更精确的条件判断</p>
<p>案例需求：</p>
<ul>
<li>提示用户输入一个高考考试分数，根据分数做如下判断</li>
<li>分数如果大于600分视为考上一本，大于500分考上二本，大于400考上三本，其余视为未考上本科；</li>
<li>在一本分数中，如果大于700分，考入北大，大于650分，考入清华，大于600考入人大。</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入考试分数：&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cin &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (score &gt; <span class="number">600</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;我考上了一本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">if</span> (score &gt; <span class="number">700</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;我考上了北大&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">650</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;我考上了清华&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;我考上了人大&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">500</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;我考上了二本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">400</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;我考上了三本大学&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;我未考上本科&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<p><strong>练习案例：</strong> 三只小猪称体重</p>
<p>有三只小猪ABC，请分别输入三只小猪的体重，并且判断哪只小猪最重？<img src="/images/C++%E8%AF%AD%E6%B3%95/assets/%E4%B8%89%E5%8F%AA%E5%B0%8F%E7%8C%AA.jpg" alt="三只小猪"></p>
<h4 id="4-1-2-三目运算符"><a href="#4-1-2-三目运算符" class="headerlink" title="4.1.2 三目运算符"></a>4.1.2 三目运算符</h4><p><strong>作用：</strong> 通过三目运算符实现简单的判断</p>
<p><strong>语法：</strong><code>表达式1 ? 表达式2 ：表达式3</code></p>
<p><strong>解释：</strong></p>
<p>如果表达式1的值为真，执行表达式2，并返回表达式2的结果；</p>
<p>如果表达式1的值为假，执行表达式3，并返回表达式3的结果。</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">	<span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	c = a &gt; b ? a : b;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//C++中三目运算符返回的是变量,可以继续赋值</span></span><br><span class="line"></span><br><span class="line">	(a &gt; b ? a : b) = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;c = &quot;</span> &lt;&lt; c &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：和if语句比较，三目运算符优点是短小整洁，缺点是如果用嵌套，结构不清晰</p>
</blockquote>
<h4 id="4-1-3-switch语句"><a href="#4-1-3-switch语句" class="headerlink" title="4.1.3 switch语句"></a>4.1.3 switch语句</h4><p><strong>作用：</strong>执行多条件分支语句</p>
<p><strong>语法：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in"><span class="keyword">switch</span></span>(表达式)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">case</span> 结果<span class="number">1</span>：执行语句;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">case</span> 结果<span class="number">2</span>：执行语句;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">	<span class="keyword">default</span>:执行语句;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>







<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//请给电影评分 </span></span><br><span class="line">	<span class="comment">//10 ~ 9   经典   </span></span><br><span class="line">	<span class="comment">// 8 ~ 7   非常好</span></span><br><span class="line">	<span class="comment">// 6 ~ 5   一般</span></span><br><span class="line">	<span class="comment">// 5分以下 烂片</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> score = <span class="number">0</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请给电影打分&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cin &gt;&gt; score;</span><br><span class="line"></span><br><span class="line">	<span class="built_in"><span class="keyword">switch</span></span> (score)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">	<span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;经典&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;非常好&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">	<span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;一般&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;烂片&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>注意1：switch语句中表达式类型只能是整型或者字符型</p>
</blockquote>
<blockquote>
<p>注意2：case里如果没有break，那么程序会一直向下执行</p>
</blockquote>
<blockquote>
<p>总结：与if语句比，对于多条件判断时，switch的结构清晰，执行效率高，缺点是switch不可以判断区间</p>
</blockquote>
<h3 id="4-2-循环结构"><a href="#4-2-循环结构" class="headerlink" title="4.2 循环结构"></a>4.2 循环结构</h3><h4 id="4-2-1-while循环语句"><a href="#4-2-1-while循环语句" class="headerlink" title="4.2.1 while循环语句"></a>4.2.1 while循环语句</h4><p><strong>作用：</strong>满足循环条件，执行循环语句</p>
<p><strong>语法：</strong><code> while(循环条件)&#123; 循环语句 &#125;</code></p>
<p><strong>解释：</strong>==只要循环条件的结果为真，就执行循环语句==</p>
<p><img src="/images/C++%E8%AF%AD%E6%B3%95/assets/clip_image002-1541668640382.png" alt="img"></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (num &lt; <span class="number">10</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;num = &quot;</span> &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">		num++;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>注意：在执行循环语句时候，程序必须提供跳出循环的出口，否则出现死循环</p>
</blockquote>
<p><strong>while循环练习案例：</strong>==猜数字==</p>
<p><strong>案例描述：</strong>系统随机生成一个1到100之间的数字，玩家进行猜测，如果猜错，提示玩家数字过大或过小，如果猜对恭喜玩家胜利，并且退出游戏。</p>
<p><img src="/images/C++%E8%AF%AD%E6%B3%95/assets/%E7%8C%9C%E6%95%B0%E5%AD%97.jpg" alt="猜数字"></p>
<h4 id="4-2-2-do…while循环语句"><a href="#4-2-2-do…while循环语句" class="headerlink" title="4.2.2 do…while循环语句"></a>4.2.2 do…while循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p>
<p><strong>语法：</strong> <code>do&#123; 循环语句 &#125; while(循环条件);</code></p>
<p><strong>注意：</strong>与while的区别在于==do…while会先执行一次循环语句==，再判断循环条件</p>
<p><img src="/images/C++%E8%AF%AD%E6%B3%95/assets/clip_image002-1541671163478.png" alt="img"></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">do</span></span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">		num++;</span><br><span class="line"></span><br><span class="line">	&#125; <span class="keyword">while</span> (num &lt; <span class="number">10</span>);</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>总结：与while循环区别在于，do…while先执行一次循环语句，再判断循环条件</p>
</blockquote>
<p><strong>练习案例：水仙花数</strong></p>
<p><strong>案例描述：</strong>水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身</p>
<p>例如：1^3 + 5^3+ 3^3 = 153</p>
<p>请利用do…while语句，求出所有3位数中的水仙花数</p>
<h4 id="4-2-3-for循环语句"><a href="#4-2-3-for循环语句" class="headerlink" title="4.2.3 for循环语句"></a>4.2.3 for循环语句</h4><p><strong>作用：</strong> 满足循环条件，执行循环语句</p>
<p><strong>语法：</strong><code> for(起始表达式;条件表达式;末尾循环体) &#123; 循环语句; &#125;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<p><strong>详解：</strong></p>
<p><img src="/images/C++%E8%AF%AD%E6%B3%95/assets/1541673704101.png" alt="1541673704101"></p>
<blockquote>
<p>注意：for循环中的表达式，要用分号进行分隔</p>
</blockquote>
<blockquote>
<p>总结：while , do…while, for都是开发中常用的循环语句，for循环结构比较清晰，比较常用</p>
</blockquote>
<p><strong>练习案例：敲桌子</strong></p>
<p>案例描述：从1开始数到数字100， 如果数字个位含有7，或者数字十位含有7，或者该数字是7的倍数，我们打印敲桌子，其余数字直接打印输出。</p>
<p><img src="/images/C++%E8%AF%AD%E6%B3%95/assets/timg.gif" alt="timg"></p>
<h4 id="4-2-4-嵌套循环"><a href="#4-2-4-嵌套循环" class="headerlink" title="4.2.4 嵌套循环"></a>4.2.4 嵌套循环</h4><p><strong>作用：</strong> 在循环体中再嵌套一层循环，解决一些实际问题</p>
<p>例如我们想在屏幕中打印如下图片，就需要利用嵌套循环</p>
<p><img src="/images/C++%E8%AF%AD%E6%B3%95/assets/1541676003486.png" alt="1541676003486"></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//外层循环执行1次，内层循环执行1轮</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;*&quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













<p><strong>练习案例：</strong>乘法口诀表</p>
<p>案例描述：利用嵌套循环，实现九九乘法表</p>
<p><img src="/images/C++%E8%AF%AD%E6%B3%95/assets/0006018857256120_b.jpg" alt="0006018857256120_b"></p>
<h3 id="4-3-跳转语句"><a href="#4-3-跳转语句" class="headerlink" title="4.3 跳转语句"></a>4.3 跳转语句</h3><h4 id="4-3-1-break语句"><a href="#4-3-1-break语句" class="headerlink" title="4.3.1 break语句"></a>4.3.1 break语句</h4><p><strong>作用:</strong> 用于跳出==选择结构==或者==循环结构==</p>
<p>break使用的时机：</p>
<ul>
<li>出现在switch条件语句中，作用是终止case并跳出switch</li>
<li>出现在循环语句中，作用是跳出当前的循环语句</li>
<li>出现在嵌套循环中，跳出最近的内层循环语句</li>
</ul>
<p><strong>示例1：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//1、在switch 语句中使用break</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请选择您挑战副本的难度：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;1、普通&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;2、中等&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;3、困难&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	cin &gt;&gt; num;</span><br><span class="line"></span><br><span class="line">	<span class="built_in"><span class="keyword">switch</span></span> (num)</span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;您选择的是普通难度&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;您选择的是中等难度&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;您选择的是困难难度&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>示例2：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//2、在循环语句中用break</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i == <span class="number">5</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">break</span>; <span class="comment">//跳出循环语句</span></span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>示例3：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//在嵌套循环语句中使用break，退出内层循环</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (j == <span class="number">5</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;*&quot;</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>















<h4 id="4-3-2-continue语句"><a href="#4-3-2-continue语句" class="headerlink" title="4.3.2 continue语句"></a>4.3.2 continue语句</h4><p><strong>作用：</strong>在==循环语句==中，跳过本次循环中余下尚未执行的语句，继续执行下一次循环</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>注意：continue并没有使整个循环终止，而break会跳出循环</p>
</blockquote>
<h4 id="4-3-3-goto语句"><a href="#4-3-3-goto语句" class="headerlink" title="4.3.3 goto语句"></a>4.3.3 goto语句</h4><p><strong>作用：</strong>可以无条件跳转语句</p>
<p><strong>语法：</strong> <code>goto 标记;</code></p>
<p><strong>解释：</strong>如果标记的名称存在，执行到goto语句时，会跳转到标记的位置</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;1&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">goto</span> FLAG;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;2&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;3&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;4&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	FLAG:</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;5&quot;</span> &lt;&lt; endl;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>注意：在程序中不建议使用goto语句，以免造成程序流程混乱</p>
</blockquote>
<h2 id="5-数组"><a href="#5-数组" class="headerlink" title="5 数组"></a>5 数组</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><p>所谓数组，就是一个集合，里面存放了相同类型的数据元素</p>
<p><strong>特点1：</strong>数组中的每个==数据元素都是相同的数据类型==</p>
<p><strong>特点2：</strong>数组是由==连续的内存==位置组成的</p>
<p><img src="/images/C++%E8%AF%AD%E6%B3%95/assets/1541748375356.png" alt="1541748375356"></p>
<h3 id="5-2-一维数组"><a href="#5-2-一维数组" class="headerlink" title="5.2 一维数组"></a>5.2 一维数组</h3><h4 id="5-2-1-一维数组定义方式"><a href="#5-2-1-一维数组定义方式" class="headerlink" title="5.2.1 一维数组定义方式"></a>5.2.1 一维数组定义方式</h4><p>一维数组定义的三种方式：</p>
<ol>
<li><code>数据类型  数组名[ 数组长度 ];</code></li>
<li><code>数据类型  数组名[ 数组长度 ] = &#123; 值1，值2 ...&#125;;</code></li>
<li><code>数据类型  数组名[ ] = &#123; 值1，值2 ...&#125;;</code></li>
</ol>
<p>示例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//定义方式1</span></span><br><span class="line">	<span class="comment">//数据类型 数组名[元素个数];</span></span><br><span class="line">	<span class="keyword">int</span> score[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">	<span class="comment">//利用下标赋值</span></span><br><span class="line">	score[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">	score[<span class="number">1</span>] = <span class="number">99</span>;</span><br><span class="line">	score[<span class="number">2</span>] = <span class="number">85</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//利用下标输出</span></span><br><span class="line">	cout &lt;&lt; score[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; score[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; score[<span class="number">2</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">//第二种定义方式</span></span><br><span class="line">	<span class="comment">//数据类型 数组名[元素个数] =  &#123;值1，值2 ，值3 ...&#125;;</span></span><br><span class="line">	<span class="comment">//如果&#123;&#125;内不足10个数据，剩余数据用0补全</span></span><br><span class="line">	<span class="keyword">int</span> score2[<span class="number">10</span>] = &#123; <span class="number">100</span>, <span class="number">90</span>,<span class="number">80</span>,<span class="number">70</span>,<span class="number">60</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span> &#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//逐个输出</span></span><br><span class="line">	<span class="comment">//cout &lt;&lt; score2[0] &lt;&lt; endl;</span></span><br><span class="line">	<span class="comment">//cout &lt;&lt; score2[1] &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//一个一个输出太麻烦，因此可以利用循环进行输出</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; score2[i] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//定义方式3</span></span><br><span class="line">	<span class="comment">//数据类型 数组名[] =  &#123;值1，值2 ，值3 ...&#125;;</span></span><br><span class="line">	<span class="keyword">int</span> score3[] = &#123; <span class="number">100</span>,<span class="number">90</span>,<span class="number">80</span>,<span class="number">70</span>,<span class="number">60</span>,<span class="number">50</span>,<span class="number">40</span>,<span class="number">30</span>,<span class="number">20</span>,<span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; score3[i] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>总结1：数组名的命名规范与变量名命名规范一致，不要和变量重名</p>
</blockquote>
<blockquote>
<p>总结2：数组中下标是从0开始索引</p>
</blockquote>
<h4 id="5-2-2-一维数组数组名"><a href="#5-2-2-一维数组数组名" class="headerlink" title="5.2.2 一维数组数组名"></a>5.2.2 一维数组数组名</h4><p>一维数组名称的<strong>用途</strong>：</p>
<ol>
<li>可以统计整个数组在内存中的长度</li>
<li>可以获取数组在内存中的首地址</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//数组名用途</span></span><br><span class="line">	<span class="comment">//1、可以获取整个数组占用内存空间大小</span></span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;整个数组所占内存空间为： &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(arr) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;每个元素所占内存空间为： &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(arr[<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;数组的元素个数为： &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(arr) / <span class="built_in"><span class="keyword">sizeof</span></span>(arr[<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//2、可以通过数组名获取到数组首地址</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;数组首地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)arr &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;数组中第一个元素地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;arr[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;数组中第二个元素地址为： &quot;</span> &lt;&lt; (<span class="keyword">int</span>)&amp;arr[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//arr = 100; 错误，数组名是常量，因此不可以赋值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>注意：数组名是常量，不可以赋值</p>
</blockquote>
<blockquote>
<p>总结1：直接打印数组名，可以查看数组所占内存的首地址</p>
</blockquote>
<blockquote>
<p>总结2：对数组名进行sizeof，可以获取整个数组占内存空间的大小</p>
</blockquote>
<p><strong>练习案例1</strong>：五只小猪称体重</p>
<p><strong>案例描述：</strong></p>
<p>在一个数组中记录了五只小猪的体重，如：int arr[5] = {300,350,200,400,250};</p>
<p>找出并打印最重的小猪体重。</p>
<p><strong>练习案例2：</strong>数组元素逆置</p>
<p><strong>案例描述：</strong>请声明一个5个元素的数组，并且将元素逆置.</p>
<p>(如原数组元素为：1,3,2,5,4;逆置后输出结果为:4,5,2,3,1);</p>
<h4 id="5-2-3-冒泡排序"><a href="#5-2-3-冒泡排序" class="headerlink" title="5.2.3 冒泡排序"></a>5.2.3 冒泡排序</h4><p><strong>作用：</strong> 最常用的排序算法，对数组内元素进行排序</p>
<ol>
<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>
<li>对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值。</li>
<li>重复以上的步骤，每次比较次数-1，直到不需要比较</li>
</ol>
<p><img src="/images/C++%E8%AF%AD%E6%B3%95/assets/1541905327273.png" alt="1541905327273"></p>
<p><strong>示例：</strong> 将数组 { 4,2,8,0,5,7,1,3,9 } 进行升序排序</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">9</span>] = &#123; <span class="number">4</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">9</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span> - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">9</span> - <span class="number">1</span> - i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> temp = arr[j];</span><br><span class="line">				arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">				arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">    </span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="5-3-二维数组"><a href="#5-3-二维数组" class="headerlink" title="5.3 二维数组"></a>5.3 二维数组</h3><p>二维数组就是在一维数组上，多加一个维度。</p>
<p><img src="/images/C++%E8%AF%AD%E6%B3%95/assets/1541905559138.png" alt="1541905559138"></p>
<h4 id="5-3-1-二维数组定义方式"><a href="#5-3-1-二维数组定义方式" class="headerlink" title="5.3.1 二维数组定义方式"></a>5.3.1 二维数组定义方式</h4><p>二维数组定义的四种方式：</p>
<ol>
<li><code>数据类型  数组名[ 行数 ][ 列数 ];</code></li>
<li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</code></li>
<li><code>数据类型  数组名[ 行数 ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li>
<li><code> 数据类型  数组名[  ][ 列数 ] = &#123; 数据1，数据2，数据3，数据4&#125;;</code></li>
</ol>
<blockquote>
<p>建议：以上4种定义方式，利用==第二种更加直观，提高代码的可读性==</p>
</blockquote>
<p>示例：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//方式1  </span></span><br><span class="line">	<span class="comment">//数组类型 数组名 [行数][列数]</span></span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">2</span>][<span class="number">3</span>];</span><br><span class="line">	arr[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	arr[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">	arr[<span class="number">0</span>][<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">	arr[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">4</span>;</span><br><span class="line">	arr[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line">	arr[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; arr[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//方式2 </span></span><br><span class="line">	<span class="comment">//数据类型 数组名[行数][列数] = &#123; &#123;数据1，数据2 &#125; ，&#123;数据3，数据4 &#125; &#125;;</span></span><br><span class="line">	<span class="keyword">int</span> arr2[<span class="number">2</span>][<span class="number">3</span>] =</span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">		&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//方式3</span></span><br><span class="line">	<span class="comment">//数据类型 数组名[行数][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span></span><br><span class="line">	<span class="keyword">int</span> arr3[<span class="number">2</span>][<span class="number">3</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;; </span><br><span class="line"></span><br><span class="line">	<span class="comment">//方式4 </span></span><br><span class="line">	<span class="comment">//数据类型 数组名[][列数] = &#123; 数据1，数据2 ,数据3，数据4  &#125;;</span></span><br><span class="line">	<span class="keyword">int</span> arr4[][<span class="number">3</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>总结：在定义二维数组时，如果初始化了数据，可以省略行数</p>
</blockquote>
<h4 id="5-3-2-二维数组数组名"><a href="#5-3-2-二维数组数组名" class="headerlink" title="5.3.2 二维数组数组名"></a>5.3.2 二维数组数组名</h4><ul>
<li>查看二维数组所占内存空间</li>
<li>获取二维数组首地址</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//二维数组数组名</span></span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">2</span>][<span class="number">3</span>] =</span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">		&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;二维数组大小： &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(arr) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;二维数组一行大小： &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(arr[<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;二维数组元素大小： &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(arr[<span class="number">0</span>][<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;二维数组行数： &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(arr) / <span class="built_in"><span class="keyword">sizeof</span></span>(arr[<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;二维数组列数： &quot;</span> &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(arr[<span class="number">0</span>]) / <span class="built_in"><span class="keyword">sizeof</span></span>(arr[<span class="number">0</span>][<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//地址</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;二维数组首地址：&quot;</span> &lt;&lt; arr &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;二维数组第一行地址：&quot;</span> &lt;&lt; arr[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;二维数组第二行地址：&quot;</span> &lt;&lt; arr[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;二维数组第一个元素地址：&quot;</span> &lt;&lt; &amp;arr[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;二维数组第二个元素地址：&quot;</span> &lt;&lt; &amp;arr[<span class="number">0</span>][<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>总结1：二维数组名就是这个数组的首地址</p>
</blockquote>
<blockquote>
<p>总结2：对二维数组名进行sizeof时，可以获取整个二维数组占用的内存空间大小</p>
</blockquote>
<h4 id="5-3-3-二维数组应用案例"><a href="#5-3-3-二维数组应用案例" class="headerlink" title="5.3.3 二维数组应用案例"></a><strong>5.3.3 二维数组应用案例</strong></h4><p><strong>考试成绩统计：</strong></p>
<p>案例描述：有三名同学（张三，李四，王五），在一次考试中的成绩分别如下表，<strong>请分别输出三名同学的总成绩</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>语文</th>
<th>数学</th>
<th>英语</th>
</tr>
</thead>
<tbody><tr>
<td>张三</td>
<td>100</td>
<td>100</td>
<td>100</td>
</tr>
<tr>
<td>李四</td>
<td>90</td>
<td>50</td>
<td>100</td>
</tr>
<tr>
<td>王五</td>
<td>60</td>
<td>70</td>
<td>80</td>
</tr>
</tbody></table>
<p><strong>参考答案：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> scores[<span class="number">3</span>][<span class="number">3</span>] =</span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>&#125;,</span><br><span class="line">		&#123;<span class="number">90</span>,<span class="number">50</span>,<span class="number">100</span>&#125;,</span><br><span class="line">		&#123;<span class="number">60</span>,<span class="number">70</span>,<span class="number">80</span>&#125;,</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	string names[<span class="number">3</span>] = &#123; <span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			sum += scores[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; names[i] &lt;&lt; <span class="string">&quot;同学总成绩为： &quot;</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>













<h2 id="6-函数"><a href="#6-函数" class="headerlink" title="6 函数"></a>6 函数</h2><h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h3><p><strong>作用：</strong>将一段经常使用的代码封装起来，减少重复代码</p>
<p>一个较大的程序，一般分为若干个程序块，每个模块实现特定的功能。</p>
<h3 id="6-2-函数的定义"><a href="#6-2-函数的定义" class="headerlink" title="6.2 函数的定义"></a>6.2 函数的定义</h3><p>函数的定义一般主要有5个步骤：</p>
<p>1、返回值类型 </p>
<p>2、函数名</p>
<p>3、参数表列</p>
<p>4、函数体语句 </p>
<p>5、return 表达式</p>
<p><strong>语法：</strong> </p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">返回值类型 函数名 （参数列表）</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">       函数体语句</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span>表达式</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>返回值类型 ：一个函数可以返回一个值。在函数定义中</li>
<li>函数名：给函数起个名称</li>
<li>参数列表：使用该函数时，传入的数据</li>
<li>函数体语句：花括号内的代码，函数内需要执行的语句</li>
<li>return表达式： 和返回值类型挂钩，函数执行完后，返回相应的数据</li>
</ul>
<p><strong>示例：</strong>定义一个加法函数，实现两个数相加</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sum = num1 + num2;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h3 id="6-3-函数的调用"><a href="#6-3-函数的调用" class="headerlink" title="6.3 函数的调用"></a>6.3 函数的调用</h3><p><strong>功能：</strong>使用定义好的函数</p>
<p><strong>语法：</strong><code> 函数名（参数）</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数定义</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span> <span class="comment">//定义中的num1,num2称为形式参数，简称形参</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> sum = num1 + num2;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">	<span class="comment">//调用add函数</span></span><br><span class="line">	<span class="keyword">int</span> sum = <span class="built_in">add</span>(a, b);<span class="comment">//调用时的a，b称为实际参数，简称实参</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;sum = &quot;</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	a = <span class="number">100</span>;</span><br><span class="line">	b = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	sum = <span class="built_in">add</span>(a, b);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;sum = &quot;</span> &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：函数定义里小括号内称为形参，函数调用时传入的参数称为实参</p>
</blockquote>
<h3 id="6-4-值传递"><a href="#6-4-值传递" class="headerlink" title="6.4 值传递"></a>6.4 值传递</h3><ul>
<li>所谓值传递，就是函数调用时实参将数值传入给形参</li>
<li>值传递时，==如果形参发生，并不会影响实参==</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> num1, <span class="keyword">int</span> num2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;交换前：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> temp = num1;</span><br><span class="line">	num1 = num2;</span><br><span class="line">	num2 = temp;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;交换后：&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;num1 = &quot;</span> &lt;&lt; num1 &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;num2 = &quot;</span> &lt;&lt; num2 &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//return ; 当函数声明时候，不需要返回值，可以不写return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">swap</span>(a, b);</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;mian中的 a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;mian中的 b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>总结： 值传递时，形参是修饰不了实参的</p>
</blockquote>
<h3 id="6-5-函数的常见样式"><a href="#6-5-函数的常见样式" class="headerlink" title="6.5 函数的常见样式"></a><strong>6.5 函数的常见样式</strong></h3><p>常见的函数样式有4种</p>
<ol>
<li>无参无返</li>
<li>有参无返</li>
<li>无参有返</li>
<li>有参有返</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数常见样式</span></span><br><span class="line"><span class="comment">//1、 无参无返</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//void a = 10; //无类型不可以创建变量,原因无法分配内存</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;this is test01&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="comment">//test01(); 函数调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、 有参无返</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;this is test02&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、无参有返</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test03</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;this is test03 &quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、有参有返</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">test04</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;this is test04 &quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">int</span> sum = a + b;</span><br><span class="line">	<span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h3 id="6-6-函数的声明"><a href="#6-6-函数的声明" class="headerlink" title="6.6 函数的声明"></a>6.6 函数的声明</h3><p><strong>作用：</strong> 告诉编译器函数名称及如何调用函数。函数的实际主体可以单独定义。</p>
<ul>
<li> 函数的<strong>声明可以多次</strong>，但是函数的<strong>定义只能有一次</strong></li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明可以多次，定义只能一次</span></span><br><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="built_in">max</span>(a, b) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h3 id="6-7-函数的分文件编写"><a href="#6-7-函数的分文件编写" class="headerlink" title="6.7 函数的分文件编写"></a>6.7 函数的分文件编写</h3><p><strong>作用：</strong>让代码结构更加清晰</p>
<p>函数分文件编写一般有4个步骤</p>
<ol>
<li>创建后缀名为.h的头文件  </li>
<li>创建后缀名为.cpp的源文件</li>
<li>在头文件中写函数的声明</li>
<li>在源文件中写函数的定义</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swap.h文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现两个数字交换的函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//swap.cpp文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;swap.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = a;</span><br><span class="line">	a = b;</span><br><span class="line">	b = temp;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//main函数文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;swap.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">200</span>;</span><br><span class="line">	<span class="built_in">swap</span>(a, b);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>













<h2 id="7-指针"><a href="#7-指针" class="headerlink" title="7 指针"></a>7 指针</h2><h3 id="7-1-指针的基本概念"><a href="#7-1-指针的基本概念" class="headerlink" title="7.1 指针的基本概念"></a>7.1 指针的基本概念</h3><p><strong>指针的作用：</strong> 可以通过指针间接访问内存</p>
<ul>
<li><p>内存编号是从0开始记录的，一般用十六进制数字表示</p>
</li>
<li><p>可以利用指针变量保存地址</p>
<p>​</p>
</li>
</ul>
<h3 id="7-2-指针变量的定义和使用"><a href="#7-2-指针变量的定义和使用" class="headerlink" title="7.2 指针变量的定义和使用"></a>7.2 指针变量的定义和使用</h3><p>指针变量定义语法： <code>数据类型 * 变量名；</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//1、指针的定义</span></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>; <span class="comment">//定义整型变量a</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//指针定义语法： 数据类型 * 变量名 ;</span></span><br><span class="line">	<span class="keyword">int</span> * p;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//指针变量赋值</span></span><br><span class="line">	p = &amp;a; <span class="comment">//指针指向变量a的地址</span></span><br><span class="line">	cout &lt;&lt; &amp;a &lt;&lt; endl; <span class="comment">//打印数据a的地址</span></span><br><span class="line">	cout &lt;&lt; p &lt;&lt; endl;  <span class="comment">//打印指针变量p</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">//2、指针的使用</span></span><br><span class="line">	<span class="comment">//通过*操作指针变量指向的内存</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;*p = &quot;</span> &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>指针变量和普通变量的区别</p>
<ul>
<li>普通变量存放的是数据,指针变量存放的是地址</li>
<li>指针变量可以通过” * “操作符，操作指针变量指向的内存空间，这个过程称为解引用</li>
</ul>
<blockquote>
<p>总结1： 我们可以通过 &amp; 符号 获取变量的地址</p>
</blockquote>
<blockquote>
<p>总结2：利用指针可以记录地址</p>
</blockquote>
<blockquote>
<p>总结3：对指针变量解引用，可以操作指针指向的内存</p>
</blockquote>
<h3 id="7-3-指针所占内存空间"><a href="#7-3-指针所占内存空间" class="headerlink" title="7.3 指针所占内存空间"></a>7.3 指针所占内存空间</h3><p>提问：指针也是种数据类型，那么这种数据类型占用多少内存空间？</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> * p;</span><br><span class="line">	p = &amp;a; <span class="comment">//指针指向数据a的地址</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; *p &lt;&lt; endl; <span class="comment">//* 解引用</span></span><br><span class="line">	cout &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(p) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">char</span> *) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">float</span> *) &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">double</span> *) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>总结：所有指针类型在32位操作系统下是4个字节</p>
</blockquote>
<h3 id="7-4-空指针和野指针"><a href="#7-4-空指针和野指针" class="headerlink" title="7.4 空指针和野指针"></a>7.4 空指针和野指针</h3><p><strong>空指针</strong>：指针变量指向内存中编号为0的空间</p>
<p><strong>用途：</strong>初始化指针变量</p>
<p><strong>注意：</strong>空指针指向的内存是不可以访问的</p>
<p><strong>示例1：空指针</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//指针变量p指向内存地址编号为0的空间</span></span><br><span class="line">	<span class="keyword">int</span> * p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//访问空指针报错 </span></span><br><span class="line">	<span class="comment">//内存编号0 ~255为系统占用内存，不允许用户访问</span></span><br><span class="line">	cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>















<p><strong>野指针</strong>：指针变量指向非法的内存空间</p>
<p><strong>示例2：野指针</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//指针变量p指向内存地址编号为0x1100的空间</span></span><br><span class="line">	<span class="keyword">int</span> * p = (<span class="keyword">int</span> *)<span class="number">0x1100</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//访问野指针报错 </span></span><br><span class="line">	cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<blockquote>
<p>总结：空指针和野指针都不是我们申请的空间，因此不要访问。</p>
</blockquote>
<h3 id="7-5-const修饰指针"><a href="#7-5-const修饰指针" class="headerlink" title="7.5 const修饰指针"></a>7.5 const修饰指针</h3><p>const修饰指针有三种情况</p>
<ol>
<li>const修饰指针   — 常量指针</li>
<li>const修饰常量   — 指针常量</li>
<li>const即修饰指针，又修饰常量</li>
</ol>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//const修饰的是指针，指针指向可以改，指针指向的值不可以更改</span></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> * p1 = &amp;a; </span><br><span class="line">	p1 = &amp;b; <span class="comment">//正确</span></span><br><span class="line">	<span class="comment">//*p1 = 100;  报错</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment">//const修饰的是常量，指针指向不可以改，指针指向的值可以更改</span></span><br><span class="line">	<span class="keyword">int</span> * <span class="keyword">const</span> p2 = &amp;a;</span><br><span class="line">	<span class="comment">//p2 = &amp;b; //错误</span></span><br><span class="line">	*p2 = <span class="number">100</span>; <span class="comment">//正确</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//const既修饰指针又修饰常量</span></span><br><span class="line">	<span class="keyword">const</span> <span class="keyword">int</span> * <span class="keyword">const</span> p3 = &amp;a;</span><br><span class="line">	<span class="comment">//p3 = &amp;b; //错误</span></span><br><span class="line">	<span class="comment">//*p3 = 100; //错误</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>技巧：看const右侧紧跟着的是指针还是常量, 是指针就是常量指针，是常量就是指针常量</p>
</blockquote>
<h3 id="7-6-指针和数组"><a href="#7-6-指针和数组" class="headerlink" title="7.6 指针和数组"></a>7.6 指针和数组</h3><p><strong>作用：</strong>利用指针访问数组中元素</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> * p = arr;  <span class="comment">//指向数组的指针</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;第一个元素： &quot;</span> &lt;&lt; arr[<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;指针访问第一个元素： &quot;</span> &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//利用指针遍历数组</span></span><br><span class="line">		cout &lt;&lt; *p &lt;&lt; endl;</span><br><span class="line">		p++;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h3 id="7-7-指针和函数"><a href="#7-7-指针和函数" class="headerlink" title="7.7 指针和函数"></a>7.7 指针和函数</h3><p><strong>作用：</strong>利用指针作函数参数，可以修改实参的值</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap1</span><span class="params">(<span class="keyword">int</span> a ,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = a;</span><br><span class="line">	a = b; </span><br><span class="line">	b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//地址传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap2</span><span class="params">(<span class="keyword">int</span> * p1, <span class="keyword">int</span> *p2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> temp = *p1;</span><br><span class="line">	*p1 = *p2;</span><br><span class="line">	*p2 = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">	<span class="built_in">swap1</span>(a, b); <span class="comment">// 值传递不会改变实参</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">swap2</span>(&amp;a, &amp;b); <span class="comment">//地址传递会改变实参</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;a = &quot;</span> &lt;&lt; a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;b = &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>总结：如果不想修改实参，就用值传递，如果想修改实参，就用地址传递</p>
</blockquote>
<h3 id="7-8-指针、数组、函数"><a href="#7-8-指针、数组、函数" class="headerlink" title="7.8 指针、数组、函数"></a>7.8 指针、数组、函数</h3><p><strong>案例描述：</strong>封装一个函数，利用冒泡排序，实现对整型数组的升序排序</p>
<p>例如数组：int arr[10] = { 4,3,6,9,1,2,10,8,7,5 };</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//冒泡排序函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span> * arr, <span class="keyword">int</span> len)</span>  <span class="comment">//int * arr 也可以写为int arr[]</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">int</span> temp = arr[j];</span><br><span class="line">				arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">				arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印数组函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; arr[i] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">5</span> &#125;;</span><br><span class="line">	<span class="keyword">int</span> len = <span class="built_in"><span class="keyword">sizeof</span></span>(arr) / <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">bubbleSort</span>(arr, len);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printArray</span>(arr, len);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>总结：当数组名传入到函数作为参数时，被退化为指向首元素的指针</p>
</blockquote>
<h2 id="8-结构体"><a href="#8-结构体" class="headerlink" title="8 结构体"></a>8 结构体</h2><h3 id="8-1-结构体基本概念"><a href="#8-1-结构体基本概念" class="headerlink" title="8.1 结构体基本概念"></a>8.1 结构体基本概念</h3><p>结构体属于用户==自定义的数据类型==，允许用户存储不同的数据类型</p>
<h3 id="8-2-结构体定义和使用"><a href="#8-2-结构体定义和使用" class="headerlink" title="8.2 结构体定义和使用"></a>8.2 结构体定义和使用</h3><p><strong>语法：</strong><code>struct 结构体名 &#123; 结构体成员列表 &#125;；</code></p>
<p>通过结构体创建变量的方式有三种：</p>
<ul>
<li>struct 结构体名 变量名</li>
<li>struct 结构体名 变量名 = { 成员1值 ， 成员2值…}</li>
<li>定义结构体时顺便创建变量</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	string name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;stu3; <span class="comment">//结构体变量创建方式3 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//结构体变量创建方式1</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu1</span>;</span> <span class="comment">//struct 关键字可以省略</span></span><br><span class="line"></span><br><span class="line">	stu1.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">	stu1.age = <span class="number">18</span>;</span><br><span class="line">	stu1.score = <span class="number">100</span>;</span><br><span class="line">	</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; stu1.name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; stu1.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu1.score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//结构体变量创建方式2</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu2</span> =</span> &#123; <span class="string">&quot;李四&quot;</span>,<span class="number">19</span>,<span class="number">60</span> &#125;;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; stu2.name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; stu2.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu2.score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	stu3.name = <span class="string">&quot;王五&quot;</span>;</span><br><span class="line">	stu3.age = <span class="number">18</span>;</span><br><span class="line">	stu3.score = <span class="number">80</span>;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; stu3.name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; stu3.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu3.score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>总结1：定义结构体时的关键字是struct，不可省略</p>
</blockquote>
<blockquote>
<p>总结2：创建结构体变量时，关键字struct可以省略</p>
</blockquote>
<blockquote>
<p>总结3：结构体变量利用操作符 ‘’.’’  访问成员</p>
</blockquote>
<h3 id="8-3-结构体数组"><a href="#8-3-结构体数组" class="headerlink" title="8.3 结构体数组"></a>8.3 结构体数组</h3><p><strong>作用：</strong>将自定义的结构体放入到数组中方便维护</p>
<p><strong>语法：</strong><code> struct  结构体名 数组名[元素个数] = &#123;  &#123;&#125; , &#123;&#125; , ... &#123;&#125; &#125;</code></p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	string name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//结构体数组</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">arr</span>[3]=</span></span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">80</span> &#125;,</span><br><span class="line">		&#123;<span class="string">&quot;李四&quot;</span>,<span class="number">19</span>,<span class="number">60</span> &#125;,</span><br><span class="line">		&#123;<span class="string">&quot;王五&quot;</span>,<span class="number">20</span>,<span class="number">70</span> &#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; arr[i].name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; arr[i].age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; arr[i].score &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>











<h3 id="8-4-结构体指针"><a href="#8-4-结构体指针" class="headerlink" title="8.4 结构体指针"></a>8.4 结构体指针</h3><p><strong>作用：</strong>通过指针访问结构体中的成员</p>
<ul>
<li>利用操作符 <code>-&gt; </code>可以通过结构体指针访问结构体属性</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	string name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu</span> =</span> &#123; <span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">100</span>, &#125;;</span><br><span class="line">	</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> * <span class="title">p</span> =</span> &amp;stu;</span><br><span class="line">	</span><br><span class="line">	p-&gt;score = <span class="number">80</span>; <span class="comment">//指针通过 -&gt; 操作符可以访问成员</span></span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; p-&gt;name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; p-&gt;age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; p-&gt;score &lt;&lt; endl;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>总结：结构体指针可以通过 -&gt; 操作符 来访问结构体中的成员</p>
</blockquote>
<h3 id="8-5-结构体嵌套结构体"><a href="#8-5-结构体嵌套结构体" class="headerlink" title="8.5 结构体嵌套结构体"></a>8.5 结构体嵌套结构体</h3><p><strong>作用：</strong> 结构体中的成员可以是另一个结构体</p>
<p><strong>例如：</strong>每个老师辅导一个学员，一个老师的结构体中，记录一个学生的结构体</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	string name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//教师结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//成员列表</span></span><br><span class="line">	<span class="keyword">int</span> id; <span class="comment">//职工编号</span></span><br><span class="line">	string name;  <span class="comment">//教师姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;   <span class="comment">//教师年龄</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">student</span> <span class="title">stu</span>;</span> <span class="comment">//子结构体 学生</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">teacher</span> <span class="title">t1</span>;</span></span><br><span class="line">	t1.id = <span class="number">10000</span>;</span><br><span class="line">	t1.name = <span class="string">&quot;老王&quot;</span>;</span><br><span class="line">	t1.age = <span class="number">40</span>;</span><br><span class="line"></span><br><span class="line">	t1.stu.name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line">	t1.stu.age = <span class="number">18</span>;</span><br><span class="line">	t1.stu.score = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;教师 职工编号： &quot;</span> &lt;&lt; t1.id &lt;&lt; <span class="string">&quot; 姓名： &quot;</span> &lt;&lt; t1.name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; t1.age &lt;&lt; endl;</span><br><span class="line">	</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;辅导学员 姓名： &quot;</span> &lt;&lt; t1.stu.name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; t1.stu.age &lt;&lt; <span class="string">&quot; 考试分数： &quot;</span> &lt;&lt; t1.stu.score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>总结：</strong>在结构体中可以定义另一个结构体作为成员，用来解决实际问题</p>
<h3 id="8-6-结构体做函数参数"><a href="#8-6-结构体做函数参数" class="headerlink" title="8.6 结构体做函数参数"></a>8.6 结构体做函数参数</h3><p><strong>作用：</strong>将结构体作为参数向函数中传递</p>
<p>传递方式有两种：</p>
<ul>
<li>值传递</li>
<li>地址传递</li>
</ul>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	string name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStudent</span><span class="params">(student stu )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	stu.age = <span class="number">28</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;子函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//地址传递</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStudent2</span><span class="params">(student *stu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	stu-&gt;age = <span class="number">28</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;子函数中 姓名：&quot;</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; stu-&gt;age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu-&gt;score &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	student stu = &#123; <span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">100</span>&#125;;</span><br><span class="line">	<span class="comment">//值传递</span></span><br><span class="line">	<span class="built_in">printStudent</span>(stu);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;主函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//地址传递</span></span><br><span class="line">	<span class="built_in">printStudent2</span>(&amp;stu);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;主函数中 姓名：&quot;</span> &lt;&lt; stu.name &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; stu.age  &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu.score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结：如果不想修改主函数中的数据，用值传递，反之用地址传递</p>
</blockquote>
<h3 id="8-7-结构体中-const使用场景"><a href="#8-7-结构体中-const使用场景" class="headerlink" title="8.7 结构体中 const使用场景"></a>8.7 结构体中 const使用场景</h3><p><strong>作用：</strong>用const来防止误操作</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生结构体定义</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="comment">//成员列表</span></span><br><span class="line">	string name;  <span class="comment">//姓名</span></span><br><span class="line">	<span class="keyword">int</span> age;      <span class="comment">//年龄</span></span><br><span class="line">	<span class="keyword">int</span> score;    <span class="comment">//分数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//const使用场景</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printStudent</span><span class="params">(<span class="keyword">const</span> student *stu)</span> <span class="comment">//加const防止函数体中的误操作</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="comment">//stu-&gt;age = 100; //操作失败，因为加了const修饰</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;姓名：&quot;</span> &lt;&lt; stu-&gt;name &lt;&lt; <span class="string">&quot; 年龄：&quot;</span> &lt;&lt; stu-&gt;age &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; stu-&gt;score &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	student stu = &#123; <span class="string">&quot;张三&quot;</span>,<span class="number">18</span>,<span class="number">100</span> &#125;;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printStudent</span>(&amp;stu);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h3 id="8-8-结构体案例"><a href="#8-8-结构体案例" class="headerlink" title="8.8 结构体案例"></a>8.8 结构体案例</h3><h4 id="8-8-1-案例1"><a href="#8-8-1-案例1" class="headerlink" title="8.8.1 案例1"></a>8.8.1 案例1</h4><p><strong>案例描述：</strong></p>
<p>学校正在做毕设项目，每名老师带领5个学生，总共有3名老师，需求如下</p>
<p>设计学生和老师的结构体，其中在老师的结构体中，有老师姓名和一个存放5名学生的数组作为成员</p>
<p>学生的成员有姓名、考试分数，创建数组存放3名老师，通过函数给每个老师及所带的学生赋值</p>
<p>最终打印出老师数据以及老师所带的学生数据。</p>
<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	string name;</span><br><span class="line">	<span class="keyword">int</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	string name;</span><br><span class="line">	Student sArray[<span class="number">5</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">allocateSpace</span><span class="params">(Teacher tArray[] , <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	string tName = <span class="string">&quot;教师&quot;</span>;</span><br><span class="line">	string sName = <span class="string">&quot;学生&quot;</span>;</span><br><span class="line">	string nameSeed = <span class="string">&quot;ABCDE&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		tArray[i].name = tName + nameSeed[i];</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			tArray[i].sArray[j].name = sName + nameSeed[j];</span><br><span class="line">			tArray[i].sArray[j].score = <span class="built_in">rand</span>() % <span class="number">61</span> + <span class="number">40</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printTeachers</span><span class="params">(Teacher tArray[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; tArray[i].name &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\t姓名：&quot;</span> &lt;&lt; tArray[i].sArray[j].name &lt;&lt; <span class="string">&quot; 分数：&quot;</span> &lt;&lt; tArray[i].sArray[j].score &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">srand</span>((<span class="keyword">unsigned</span> <span class="keyword">int</span>)<span class="built_in">time</span>(<span class="literal">NULL</span>)); <span class="comment">//随机数种子 头文件 #include &lt;ctime&gt;</span></span><br><span class="line"></span><br><span class="line">	Teacher tArray[<span class="number">3</span>]; <span class="comment">//老师数组</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> len = <span class="built_in"><span class="keyword">sizeof</span></span>(tArray) / <span class="built_in"><span class="keyword">sizeof</span></span>(Teacher);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">allocateSpace</span>(tArray, len); <span class="comment">//创建数据</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printTeachers</span>(tArray, len); <span class="comment">//打印数据</span></span><br><span class="line">	</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>









<h4 id="8-8-2-案例2"><a href="#8-8-2-案例2" class="headerlink" title="8.8.2 案例2"></a>8.8.2 案例2</h4><p><strong>案例描述：</strong></p>
<p>设计一个英雄的结构体，包括成员姓名，年龄，性别;创建结构体数组，数组中存放5名英雄。</p>
<p>通过冒泡排序的算法，将数组中的英雄按照年龄进行升序排序，最终打印排序后的结果。</p>
<p>五名英雄信息如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;刘备&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;关羽&quot;</span>,<span class="number">22</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;张飞&quot;</span>,<span class="number">20</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;赵云&quot;</span>,<span class="number">21</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;貂蝉&quot;</span>,<span class="number">19</span>,<span class="string">&quot;女&quot;</span>&#125;,</span><br></pre></td></tr></table></figure>









<p><strong>示例：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//英雄结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hero</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	string name;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">	string sex;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//冒泡排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(hero arr[] , <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j].age &gt; arr[j + <span class="number">1</span>].age)</span><br><span class="line">			&#123;</span><br><span class="line">				hero temp = arr[j];</span><br><span class="line">				arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">				arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printHeros</span><span class="params">(hero arr[], <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;姓名： &quot;</span> &lt;&lt; arr[i].name &lt;&lt; <span class="string">&quot; 性别： &quot;</span> &lt;&lt; arr[i].sex &lt;&lt; <span class="string">&quot; 年龄： &quot;</span> &lt;&lt; arr[i].age &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">hero</span> <span class="title">arr</span>[5] =</span></span><br><span class="line">	&#123;</span><br><span class="line">		&#123;<span class="string">&quot;刘备&quot;</span>,<span class="number">23</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">		&#123;<span class="string">&quot;关羽&quot;</span>,<span class="number">22</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">		&#123;<span class="string">&quot;张飞&quot;</span>,<span class="number">20</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">		&#123;<span class="string">&quot;赵云&quot;</span>,<span class="number">21</span>,<span class="string">&quot;男&quot;</span>&#125;,</span><br><span class="line">		&#123;<span class="string">&quot;貂蝉&quot;</span>,<span class="number">19</span>,<span class="string">&quot;女&quot;</span>&#125;,</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> len = <span class="built_in"><span class="keyword">sizeof</span></span>(arr) / <span class="built_in"><span class="keyword">sizeof</span></span>(hero); <span class="comment">//获取数组元素个数</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">bubbleSort</span>(arr, len); <span class="comment">//排序</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printHeros</span>(arr, len); <span class="comment">//打印</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
  </entry>
</search>
